;buildInfoPackage: chisel3, version: 3.0.2, scalaVersion: 2.12.3, sbtVersion: 0.13.16, builtAtString: 2018-02-05 23:26:31.979, builtAtMillis: 1517873191979
circuit DebugAccessPort : 
  module UartTxRx : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip rx : UInt<1>, tx : UInt<1>, rxData : UInt<8>, flip rxReady : UInt<1>, rxValid : UInt<1>, flip rxAck : UInt<1>, flip txData : UInt<8>, txReady : UInt<1>, flip txValid : UInt<1>, txAck : UInt<1>, rxActive : UInt<1>, txActive : UInt<1>, rxDebugBuf : UInt<8>, txDebugBuf : UInt<8>}
    
    reg tx : UInt<1>, clock with : (reset => (reset, UInt<1>("h01"))) @[UartTxRx.scala 30:19]
    reg rxData : UInt<8>, clock with : (reset => (reset, UInt<1>("h00"))) @[UartTxRx.scala 31:23]
    reg rxValid : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[UartTxRx.scala 32:24]
    reg txReady : UInt<1>, clock with : (reset => (reset, UInt<1>("h01"))) @[UartTxRx.scala 33:24]
    reg txAck : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[UartTxRx.scala 34:22]
    io.tx <= tx @[UartTxRx.scala 35:9]
    io.rxData <= rxData @[UartTxRx.scala 36:13]
    io.rxValid <= rxValid @[UartTxRx.scala 37:14]
    io.txReady <= txReady @[UartTxRx.scala 38:14]
    io.txAck <= txAck @[UartTxRx.scala 39:12]
    reg rxActive : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[UartTxRx.scala 48:25]
    io.rxActive <= rxActive @[UartTxRx.scala 49:15]
    reg rxTrigger : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[UartTxRx.scala 50:26]
    reg rxDurationCounter : SInt<10>, clock with : (reset => (reset, asSInt(UInt<1>("h00")))) @[UartTxRx.scala 51:34]
    reg rx1 : UInt<1>, clock with : (reset => (reset, UInt<1>("h01"))) @[UartTxRx.scala 52:20]
    reg rx2 : UInt<1>, clock with : (reset => (reset, UInt<1>("h01"))) @[UartTxRx.scala 53:20]
    rx1 <= io.rx @[UartTxRx.scala 54:7]
    rx2 <= rx1 @[UartTxRx.scala 55:7]
    node _T_37 = eq(rxActive, UInt<1>("h00")) @[UartTxRx.scala 56:8]
    when _T_37 : @[UartTxRx.scala 56:19]
      node _T_39 = eq(rx1, UInt<1>("h00")) @[UartTxRx.scala 57:17]
      node _T_40 = and(rx2, _T_39) @[UartTxRx.scala 57:14]
      when _T_40 : @[UartTxRx.scala 57:23]
        rxActive <= UInt<1>("h01") @[UartTxRx.scala 59:16]
        rxTrigger <= UInt<1>("h00") @[UartTxRx.scala 60:17]
        node _T_45 = sub(asSInt(UInt<1>("h00")), asSInt(UInt<9>("h0d9"))) @[UartTxRx.scala 61:28]
        node _T_46 = tail(_T_45, 1) @[UartTxRx.scala 61:28]
        node _T_47 = asSInt(_T_46) @[UartTxRx.scala 61:28]
        rxDurationCounter <= _T_47 @[UartTxRx.scala 61:25]
        skip @[UartTxRx.scala 57:23]
      else : @[UartTxRx.scala 62:18]
        rxActive <= UInt<1>("h00") @[UartTxRx.scala 63:16]
        rxTrigger <= UInt<1>("h00") @[UartTxRx.scala 64:17]
        skip @[UartTxRx.scala 62:18]
      skip @[UartTxRx.scala 56:19]
    else : @[UartTxRx.scala 66:16]
      node _T_51 = lt(rxDurationCounter, asSInt(UInt<10>("h01b2"))) @[UartTxRx.scala 67:28]
      when _T_51 : @[UartTxRx.scala 67:42]
        node _T_53 = add(rxDurationCounter, asSInt(UInt<2>("h01"))) @[UartTxRx.scala 68:46]
        node _T_54 = tail(_T_53, 1) @[UartTxRx.scala 68:46]
        node _T_55 = asSInt(_T_54) @[UartTxRx.scala 68:46]
        rxDurationCounter <= _T_55 @[UartTxRx.scala 68:25]
        rxTrigger <= UInt<1>("h00") @[UartTxRx.scala 69:17]
        skip @[UartTxRx.scala 67:42]
      else : @[UartTxRx.scala 70:18]
        rxDurationCounter <= asSInt(UInt<1>("h00")) @[UartTxRx.scala 71:25]
        rxTrigger <= UInt<1>("h01") @[UartTxRx.scala 72:17]
        skip @[UartTxRx.scala 70:18]
      skip @[UartTxRx.scala 66:16]
    reg rxBuf : UInt<8>, clock with : (reset => (reset, UInt<1>("h00"))) @[UartTxRx.scala 76:22]
    io.rxDebugBuf <= rxBuf @[UartTxRx.scala 77:17]
    reg rxCounter : UInt<4>, clock with : (reset => (reset, UInt<1>("h00"))) @[UartTxRx.scala 78:26]
    when rxActive : @[UartTxRx.scala 79:18]
      when rxTrigger : @[UartTxRx.scala 80:21]
        node _T_64 = add(rxCounter, UInt<1>("h01")) @[UartTxRx.scala 81:30]
        node _T_65 = tail(_T_64, 1) @[UartTxRx.scala 81:30]
        rxCounter <= _T_65 @[UartTxRx.scala 81:17]
        node _T_66 = shr(rxBuf, 1) @[UartTxRx.scala 82:23]
        node _T_69 = mux(io.rx, UInt<8>("h080"), UInt<1>("h00")) @[UartTxRx.scala 82:41]
        node _T_70 = add(_T_66, _T_69) @[UartTxRx.scala 82:36]
        node _T_71 = tail(_T_70, 1) @[UartTxRx.scala 82:36]
        rxBuf <= _T_71 @[UartTxRx.scala 82:13]
        node _T_73 = gt(rxCounter, UInt<3>("h07")) @[UartTxRx.scala 85:22]
        when _T_73 : @[UartTxRx.scala 85:29]
          rxActive <= UInt<1>("h00") @[UartTxRx.scala 87:18]
          rxData <= rxBuf @[UartTxRx.scala 88:16]
          rxValid <= UInt<1>("h01") @[UartTxRx.scala 89:17]
          skip @[UartTxRx.scala 85:29]
        skip @[UartTxRx.scala 80:21]
      skip @[UartTxRx.scala 79:18]
    else : @[UartTxRx.scala 92:16]
      rxBuf <= UInt<1>("h00") @[UartTxRx.scala 93:11]
      rxCounter <= UInt<1>("h00") @[UartTxRx.scala 94:15]
      skip @[UartTxRx.scala 92:16]
    node _T_78 = and(rxValid, io.rxAck) @[UartTxRx.scala 97:16]
    when _T_78 : @[UartTxRx.scala 97:28]
      rxData <= UInt<1>("h00") @[UartTxRx.scala 98:12]
      rxValid <= UInt<1>("h00") @[UartTxRx.scala 99:13]
      skip @[UartTxRx.scala 97:28]
    reg txActive : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[UartTxRx.scala 103:25]
    io.txActive <= txActive @[UartTxRx.scala 104:15]
    reg txTrigger : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[UartTxRx.scala 105:26]
    reg txDurationCounter : SInt<10>, clock with : (reset => (reset, asSInt(UInt<1>("h00")))) @[UartTxRx.scala 106:34]
    reg txBuf : UInt<8>, clock with : (reset => (reset, UInt<1>("h00"))) @[UartTxRx.scala 107:22]
    io.txDebugBuf <= txBuf @[UartTxRx.scala 108:17]
    reg txCounter : UInt<4>, clock with : (reset => (reset, UInt<1>("h00"))) @[UartTxRx.scala 109:26]
    node _T_92 = eq(txActive, UInt<1>("h00")) @[UartTxRx.scala 110:8]
    when _T_92 : @[UartTxRx.scala 110:19]
      when io.txValid : @[UartTxRx.scala 111:23]
        txActive <= UInt<1>("h01") @[UartTxRx.scala 114:16]
        txBuf <= io.txData @[UartTxRx.scala 115:13]
        txAck <= UInt<1>("h01") @[UartTxRx.scala 116:13]
        txDurationCounter <= asSInt(UInt<1>("h00")) @[UartTxRx.scala 117:25]
        skip @[UartTxRx.scala 111:23]
      else : @[UartTxRx.scala 118:18]
        txAck <= UInt<1>("h00") @[UartTxRx.scala 119:13]
        skip @[UartTxRx.scala 118:18]
      skip @[UartTxRx.scala 110:19]
    else : @[UartTxRx.scala 121:16]
      txAck <= UInt<1>("h00") @[UartTxRx.scala 122:11]
      node _T_99 = lt(txDurationCounter, asSInt(UInt<10>("h01b2"))) @[UartTxRx.scala 123:29]
      when _T_99 : @[UartTxRx.scala 123:43]
        node _T_101 = add(txDurationCounter, asSInt(UInt<2>("h01"))) @[UartTxRx.scala 124:46]
        node _T_102 = tail(_T_101, 1) @[UartTxRx.scala 124:46]
        node _T_103 = asSInt(_T_102) @[UartTxRx.scala 124:46]
        txDurationCounter <= _T_103 @[UartTxRx.scala 124:25]
        txTrigger <= UInt<1>("h00") @[UartTxRx.scala 125:17]
        skip @[UartTxRx.scala 123:43]
      else : @[UartTxRx.scala 126:18]
        txDurationCounter <= asSInt(UInt<1>("h00")) @[UartTxRx.scala 127:25]
        txTrigger <= UInt<1>("h01") @[UartTxRx.scala 128:17]
        skip @[UartTxRx.scala 126:18]
      skip @[UartTxRx.scala 121:16]
    when txActive : @[UartTxRx.scala 133:18]
      when txTrigger : @[UartTxRx.scala 134:21]
        node _T_108 = eq(txCounter, UInt<1>("h00")) @[UartTxRx.scala 136:22]
        when _T_108 : @[UartTxRx.scala 136:31]
          tx <= UInt<1>("h00") @[UartTxRx.scala 138:12]
          node _T_111 = add(txCounter, UInt<1>("h01")) @[UartTxRx.scala 139:32]
          node _T_112 = tail(_T_111, 1) @[UartTxRx.scala 139:32]
          txCounter <= _T_112 @[UartTxRx.scala 139:19]
          skip @[UartTxRx.scala 136:31]
        else : @[UartTxRx.scala 140:36]
          node _T_114 = lt(txCounter, UInt<4>("h09")) @[UartTxRx.scala 140:29]
          when _T_114 : @[UartTxRx.scala 140:36]
            node _T_116 = sub(txCounter, UInt<1>("h01")) @[UartTxRx.scala 143:31]
            node _T_117 = asUInt(_T_116) @[UartTxRx.scala 143:31]
            node _T_118 = tail(_T_117, 1) @[UartTxRx.scala 143:31]
            node _T_119 = dshr(txBuf, _T_118) @[UartTxRx.scala 143:20]
            node _T_120 = bits(_T_119, 0, 0) @[UartTxRx.scala 143:20]
            tx <= _T_120 @[UartTxRx.scala 143:12]
            node _T_122 = add(txCounter, UInt<1>("h01")) @[UartTxRx.scala 144:32]
            node _T_123 = tail(_T_122, 1) @[UartTxRx.scala 144:32]
            txCounter <= _T_123 @[UartTxRx.scala 144:19]
            skip @[UartTxRx.scala 140:36]
          else : @[UartTxRx.scala 145:37]
            node _T_125 = lt(txCounter, UInt<4>("h0a")) @[UartTxRx.scala 145:29]
            when _T_125 : @[UartTxRx.scala 145:37]
              node _T_126 = bits(reset, 0, 0) @[UartTxRx.scala 147:15]
              node _T_128 = eq(_T_126, UInt<1>("h00")) @[UartTxRx.scala 147:15]
              when _T_128 : @[UartTxRx.scala 147:15]
                printf(clock, UInt<1>(1), "[Tx] stopbit\n") @[UartTxRx.scala 147:15]
                skip @[UartTxRx.scala 147:15]
              tx <= UInt<1>("h01") @[UartTxRx.scala 148:11]
              node _T_131 = add(txCounter, UInt<1>("h01")) @[UartTxRx.scala 149:32]
              node _T_132 = tail(_T_131, 1) @[UartTxRx.scala 149:32]
              txCounter <= _T_132 @[UartTxRx.scala 149:19]
              skip @[UartTxRx.scala 145:37]
            else : @[UartTxRx.scala 150:20]
              txActive <= UInt<1>("h00") @[UartTxRx.scala 153:18]
              tx <= UInt<1>("h01") @[UartTxRx.scala 154:12]
              txCounter <= UInt<1>("h00") @[UartTxRx.scala 155:19]
              skip @[UartTxRx.scala 150:20]
        skip @[UartTxRx.scala 134:21]
      skip @[UartTxRx.scala 133:18]
    else : @[UartTxRx.scala 158:16]
      tx <= UInt<1>("h01") @[UartTxRx.scala 159:8]
      txCounter <= UInt<1>("h00") @[UartTxRx.scala 160:15]
      skip @[UartTxRx.scala 158:16]
    
  module BrainfuckProcessor : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip run : UInt<1>, flip program : UInt<1>, flip programData : UInt<8>, flip programValid : UInt<1>, programReady : UInt<1>, programAck : UInt<1>, pc : UInt<14>, inst : UInt<8>, stackPtr : UInt<10>, stackData : UInt<8>, branchStackPtr : UInt<4>, branchStackData : UInt<14>, halted : UInt<1>, errorCode : UInt<3>, flip stdinData : UInt<8>, flip stdinValid : UInt<1>, stdinReady : UInt<1>, stdinAck : UInt<1>, stdoutData : UInt<8>, stdoutValid : UInt<1>, flip stdoutReady : UInt<1>, flip stdoutAck : UInt<1>}
    
    reg programReady : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[BrainfuckProcessor.scala 46:29]
    io.programReady <= programReady @[BrainfuckProcessor.scala 47:19]
    reg programAck : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[BrainfuckProcessor.scala 48:27]
    io.programAck <= programAck @[BrainfuckProcessor.scala 49:17]
    reg halted : UInt<1>, clock with : (reset => (reset, UInt<1>("h01"))) @[BrainfuckProcessor.scala 50:23]
    io.halted <= halted @[BrainfuckProcessor.scala 51:13]
    reg errorCode : UInt<4>, clock with : (reset => (reset, UInt<1>("h00"))) @[BrainfuckProcessor.scala 52:26]
    io.errorCode <= errorCode @[BrainfuckProcessor.scala 53:16]
    reg stdinReady : UInt<1>, clock with : (reset => (reset, UInt<1>("h01"))) @[BrainfuckProcessor.scala 54:27]
    io.stdinReady <= stdinReady @[BrainfuckProcessor.scala 55:17]
    reg stdinAck : UInt<1>, clock with : (reset => (reset, UInt<1>("h01"))) @[BrainfuckProcessor.scala 56:25]
    io.stdinAck <= stdinAck @[BrainfuckProcessor.scala 57:15]
    reg stdoutData : UInt<8>, clock with : (reset => (reset, UInt<1>("h00"))) @[BrainfuckProcessor.scala 58:27]
    io.stdoutData <= stdoutData @[BrainfuckProcessor.scala 59:17]
    reg stdoutValid : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[BrainfuckProcessor.scala 60:28]
    io.stdoutValid <= stdoutValid @[BrainfuckProcessor.scala 61:18]
    cmem instMem : UInt<8>[16384] @[BrainfuckProcessor.scala 64:20]
    reg programAddr : UInt<14>, clock with : (reset => (reset, UInt<1>("h00"))) @[BrainfuckProcessor.scala 65:28]
    cmem stackMem : UInt<8>[1024] @[BrainfuckProcessor.scala 68:21]
    reg stackPtr : UInt<10>, clock with : (reset => (reset, UInt<1>("h00"))) @[BrainfuckProcessor.scala 69:25]
    reg stackData : UInt<8>, clock with : (reset => (reset, UInt<1>("h00"))) @[BrainfuckProcessor.scala 70:26]
    io.stackPtr <= stackPtr @[BrainfuckProcessor.scala 71:15]
    io.stackData <= stackData @[BrainfuckProcessor.scala 72:16]
    cmem branchStackMem : UInt<14>[16] @[BrainfuckProcessor.scala 75:27]
    reg branchStackPtr : UInt<4>, clock with : (reset => (reset, UInt<1>("h00"))) @[BrainfuckProcessor.scala 76:31]
    reg branchStackData : UInt<14>, clock with : (reset => (reset, UInt<1>("h00"))) @[BrainfuckProcessor.scala 77:32]
    io.branchStackPtr <= branchStackPtr @[BrainfuckProcessor.scala 78:21]
    io.branchStackData <= branchStackData @[BrainfuckProcessor.scala 79:22]
    when stdinAck : @[BrainfuckProcessor.scala 82:18]
      stdinAck <= UInt<1>("h00") @[BrainfuckProcessor.scala 83:14]
      skip @[BrainfuckProcessor.scala 82:18]
    when stdoutValid : @[BrainfuckProcessor.scala 85:21]
      when io.stdoutAck : @[BrainfuckProcessor.scala 86:24]
        stdoutData <= UInt<1>("h00") @[BrainfuckProcessor.scala 87:18]
        stdoutValid <= UInt<1>("h00") @[BrainfuckProcessor.scala 88:19]
        skip @[BrainfuckProcessor.scala 86:24]
      skip @[BrainfuckProcessor.scala 85:21]
    reg branchJump : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[BrainfuckProcessor.scala 92:27]
    reg branchJumpNest : UInt<4>, clock with : (reset => (reset, UInt<1>("h00"))) @[BrainfuckProcessor.scala 93:31]
    reg inst : UInt<8>, clock with : (reset => (reset, UInt<1>("h00"))) @[BrainfuckProcessor.scala 94:21]
    reg pc : UInt<14>, clock with : (reset => (reset, UInt<1>("h00"))) @[BrainfuckProcessor.scala 95:19]
    io.inst <= inst @[BrainfuckProcessor.scala 96:11]
    io.pc <= pc @[BrainfuckProcessor.scala 97:9]
    node _T_68 = eq(halted, UInt<1>("h00")) @[BrainfuckProcessor.scala 99:8]
    when _T_68 : @[BrainfuckProcessor.scala 99:17]
      node _T_69 = bits(reset, 0, 0) @[BrainfuckProcessor.scala 100:11]
      node _T_71 = eq(_T_69, UInt<1>("h00")) @[BrainfuckProcessor.scala 100:11]
      when _T_71 : @[BrainfuckProcessor.scala 100:11]
        printf(clock, UInt<1>(1), "[process] branchJump:%d pc:%d inst:%c (%d) stackPtr:%d stackData:%d\n", branchJump, pc, inst, inst, stackPtr, stackData) @[BrainfuckProcessor.scala 100:11]
        skip @[BrainfuckProcessor.scala 100:11]
      when branchJump : @[BrainfuckProcessor.scala 101:22]
        node _T_73 = add(pc, UInt<1>("h01")) @[BrainfuckProcessor.scala 103:17]
        node _T_74 = tail(_T_73, 1) @[BrainfuckProcessor.scala 103:17]
        pc <= _T_74 @[BrainfuckProcessor.scala 103:10]
        node _T_76 = add(pc, UInt<1>("h01")) @[BrainfuckProcessor.scala 104:31]
        node _T_77 = tail(_T_76, 1) @[BrainfuckProcessor.scala 104:31]
        read mport _T_78 = instMem[_T_77], clock @[BrainfuckProcessor.scala 104:27]
        inst <= _T_78 @[BrainfuckProcessor.scala 104:12]
        node _T_81 = eq(UInt<1>("h00"), inst) @[Conditional.scala 37:30]
        node _T_82 = eq(UInt<6>("h023"), inst) @[Conditional.scala 37:30]
        node _T_83 = or(_T_81, _T_82) @[Conditional.scala 37:55]
        when _T_83 : @[Conditional.scala 40:58]
          halted <= UInt<1>("h01") @[BrainfuckProcessor.scala 107:18]
          errorCode <= UInt<1>("h01") @[BrainfuckProcessor.scala 108:21]
          skip @[Conditional.scala 40:58]
        else : @[Conditional.scala 39:67]
          node _T_87 = eq(UInt<7>("h05b"), inst) @[Conditional.scala 37:30]
          when _T_87 : @[Conditional.scala 39:67]
            node _T_89 = eq(branchJumpNest, UInt<4>("h0f")) @[BrainfuckProcessor.scala 111:31]
            when _T_89 : @[BrainfuckProcessor.scala 111:63]
              halted <= UInt<1>("h01") @[BrainfuckProcessor.scala 112:20]
              errorCode <= UInt<2>("h02") @[BrainfuckProcessor.scala 113:23]
              skip @[BrainfuckProcessor.scala 111:63]
            else : @[BrainfuckProcessor.scala 114:24]
              node _T_93 = add(branchJumpNest, UInt<1>("h01")) @[BrainfuckProcessor.scala 115:47]
              node _T_94 = tail(_T_93, 1) @[BrainfuckProcessor.scala 115:47]
              branchJumpNest <= _T_94 @[BrainfuckProcessor.scala 115:28]
              skip @[BrainfuckProcessor.scala 114:24]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_96 = eq(UInt<7>("h05d"), inst) @[Conditional.scala 37:30]
            when _T_96 : @[Conditional.scala 39:67]
              node _T_98 = gt(branchJumpNest, UInt<1>("h00")) @[BrainfuckProcessor.scala 119:31]
              when _T_98 : @[BrainfuckProcessor.scala 119:38]
                node _T_100 = sub(branchJumpNest, UInt<1>("h01")) @[BrainfuckProcessor.scala 120:47]
                node _T_101 = asUInt(_T_100) @[BrainfuckProcessor.scala 120:47]
                node _T_102 = tail(_T_101, 1) @[BrainfuckProcessor.scala 120:47]
                branchJumpNest <= _T_102 @[BrainfuckProcessor.scala 120:28]
                skip @[BrainfuckProcessor.scala 119:38]
              else : @[BrainfuckProcessor.scala 121:24]
                branchJump <= UInt<1>("h00") @[BrainfuckProcessor.scala 123:24]
                branchJumpNest <= UInt<1>("h00") @[BrainfuckProcessor.scala 124:28]
                skip @[BrainfuckProcessor.scala 121:24]
              skip @[Conditional.scala 39:67]
        skip @[BrainfuckProcessor.scala 101:22]
      else : @[BrainfuckProcessor.scala 128:18]
        node _T_107 = eq(UInt<1>("h00"), inst) @[Conditional.scala 37:30]
        node _T_108 = eq(UInt<6>("h023"), inst) @[Conditional.scala 37:30]
        node _T_109 = or(_T_107, _T_108) @[Conditional.scala 37:55]
        when _T_109 : @[Conditional.scala 40:58]
          halted <= UInt<1>("h01") @[BrainfuckProcessor.scala 132:18]
          errorCode <= UInt<1>("h00") @[BrainfuckProcessor.scala 133:21]
          skip @[Conditional.scala 40:58]
        else : @[Conditional.scala 39:67]
          node _T_113 = eq(UInt<6>("h03e"), inst) @[Conditional.scala 37:30]
          when _T_113 : @[Conditional.scala 39:67]
            node _T_115 = eq(stackPtr, UInt<10>("h03ff")) @[BrainfuckProcessor.scala 136:26]
            when _T_115 : @[BrainfuckProcessor.scala 136:52]
              halted <= UInt<1>("h01") @[BrainfuckProcessor.scala 137:20]
              errorCode <= UInt<2>("h03") @[BrainfuckProcessor.scala 138:23]
              skip @[BrainfuckProcessor.scala 136:52]
            else : @[BrainfuckProcessor.scala 139:24]
              node _T_119 = add(pc, UInt<1>("h01")) @[BrainfuckProcessor.scala 140:23]
              node _T_120 = tail(_T_119, 1) @[BrainfuckProcessor.scala 140:23]
              pc <= _T_120 @[BrainfuckProcessor.scala 140:16]
              node _T_122 = add(pc, UInt<1>("h01")) @[BrainfuckProcessor.scala 141:37]
              node _T_123 = tail(_T_122, 1) @[BrainfuckProcessor.scala 141:37]
              read mport _T_124 = instMem[_T_123], clock @[BrainfuckProcessor.scala 141:33]
              inst <= _T_124 @[BrainfuckProcessor.scala 141:18]
              node _T_126 = add(stackPtr, UInt<1>("h01")) @[BrainfuckProcessor.scala 142:35]
              node _T_127 = tail(_T_126, 1) @[BrainfuckProcessor.scala 142:35]
              stackPtr <= _T_127 @[BrainfuckProcessor.scala 142:22]
              node _T_129 = add(stackPtr, UInt<1>("h01")) @[BrainfuckProcessor.scala 143:49]
              node _T_130 = tail(_T_129, 1) @[BrainfuckProcessor.scala 143:49]
              read mport _T_131 = stackMem[_T_130], clock @[BrainfuckProcessor.scala 143:39]
              stackData <= _T_131 @[BrainfuckProcessor.scala 143:23]
              skip @[BrainfuckProcessor.scala 139:24]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_133 = eq(UInt<6>("h03c"), inst) @[Conditional.scala 37:30]
            when _T_133 : @[Conditional.scala 39:67]
              node _T_135 = eq(stackPtr, UInt<1>("h00")) @[BrainfuckProcessor.scala 147:26]
              when _T_135 : @[BrainfuckProcessor.scala 147:35]
                halted <= UInt<1>("h01") @[BrainfuckProcessor.scala 148:20]
                errorCode <= UInt<3>("h04") @[BrainfuckProcessor.scala 149:23]
                skip @[BrainfuckProcessor.scala 147:35]
              else : @[BrainfuckProcessor.scala 150:24]
                node _T_139 = add(pc, UInt<1>("h01")) @[BrainfuckProcessor.scala 151:23]
                node _T_140 = tail(_T_139, 1) @[BrainfuckProcessor.scala 151:23]
                pc <= _T_140 @[BrainfuckProcessor.scala 151:16]
                node _T_142 = add(pc, UInt<1>("h01")) @[BrainfuckProcessor.scala 152:37]
                node _T_143 = tail(_T_142, 1) @[BrainfuckProcessor.scala 152:37]
                read mport _T_144 = instMem[_T_143], clock @[BrainfuckProcessor.scala 152:33]
                inst <= _T_144 @[BrainfuckProcessor.scala 152:18]
                node _T_146 = sub(stackPtr, UInt<1>("h01")) @[BrainfuckProcessor.scala 153:35]
                node _T_147 = asUInt(_T_146) @[BrainfuckProcessor.scala 153:35]
                node _T_148 = tail(_T_147, 1) @[BrainfuckProcessor.scala 153:35]
                stackPtr <= _T_148 @[BrainfuckProcessor.scala 153:22]
                node _T_150 = sub(stackPtr, UInt<1>("h01")) @[BrainfuckProcessor.scala 154:49]
                node _T_151 = asUInt(_T_150) @[BrainfuckProcessor.scala 154:49]
                node _T_152 = tail(_T_151, 1) @[BrainfuckProcessor.scala 154:49]
                read mport _T_153 = stackMem[_T_152], clock @[BrainfuckProcessor.scala 154:39]
                stackData <= _T_153 @[BrainfuckProcessor.scala 154:23]
                skip @[BrainfuckProcessor.scala 150:24]
              skip @[Conditional.scala 39:67]
            else : @[Conditional.scala 39:67]
              node _T_155 = eq(UInt<6>("h02b"), inst) @[Conditional.scala 37:30]
              when _T_155 : @[Conditional.scala 39:67]
                node _T_157 = add(stackData, UInt<1>("h01")) @[BrainfuckProcessor.scala 158:46]
                node _T_158 = tail(_T_157, 1) @[BrainfuckProcessor.scala 158:46]
                write mport _T_159 = stackMem[stackPtr], clock
                _T_159 <= _T_158
                node _T_161 = add(pc, UInt<1>("h01")) @[BrainfuckProcessor.scala 160:21]
                node _T_162 = tail(_T_161, 1) @[BrainfuckProcessor.scala 160:21]
                pc <= _T_162 @[BrainfuckProcessor.scala 160:14]
                node _T_164 = add(pc, UInt<1>("h01")) @[BrainfuckProcessor.scala 161:35]
                node _T_165 = tail(_T_164, 1) @[BrainfuckProcessor.scala 161:35]
                read mport _T_166 = instMem[_T_165], clock @[BrainfuckProcessor.scala 161:31]
                inst <= _T_166 @[BrainfuckProcessor.scala 161:16]
                node _T_168 = add(stackData, UInt<1>("h01")) @[BrainfuckProcessor.scala 162:35]
                node _T_169 = tail(_T_168, 1) @[BrainfuckProcessor.scala 162:35]
                stackData <= _T_169 @[BrainfuckProcessor.scala 162:21]
                skip @[Conditional.scala 39:67]
              else : @[Conditional.scala 39:67]
                node _T_171 = eq(UInt<6>("h02d"), inst) @[Conditional.scala 37:30]
                when _T_171 : @[Conditional.scala 39:67]
                  node _T_173 = sub(stackData, UInt<1>("h01")) @[BrainfuckProcessor.scala 165:46]
                  node _T_174 = asUInt(_T_173) @[BrainfuckProcessor.scala 165:46]
                  node _T_175 = tail(_T_174, 1) @[BrainfuckProcessor.scala 165:46]
                  write mport _T_176 = stackMem[stackPtr], clock
                  _T_176 <= _T_175
                  node _T_178 = add(pc, UInt<1>("h01")) @[BrainfuckProcessor.scala 167:21]
                  node _T_179 = tail(_T_178, 1) @[BrainfuckProcessor.scala 167:21]
                  pc <= _T_179 @[BrainfuckProcessor.scala 167:14]
                  node _T_181 = add(pc, UInt<1>("h01")) @[BrainfuckProcessor.scala 168:35]
                  node _T_182 = tail(_T_181, 1) @[BrainfuckProcessor.scala 168:35]
                  read mport _T_183 = instMem[_T_182], clock @[BrainfuckProcessor.scala 168:31]
                  inst <= _T_183 @[BrainfuckProcessor.scala 168:16]
                  node _T_185 = sub(stackData, UInt<1>("h01")) @[BrainfuckProcessor.scala 169:35]
                  node _T_186 = asUInt(_T_185) @[BrainfuckProcessor.scala 169:35]
                  node _T_187 = tail(_T_186, 1) @[BrainfuckProcessor.scala 169:35]
                  stackData <= _T_187 @[BrainfuckProcessor.scala 169:21]
                  skip @[Conditional.scala 39:67]
                else : @[Conditional.scala 39:67]
                  node _T_189 = eq(UInt<6>("h02e"), inst) @[Conditional.scala 37:30]
                  when _T_189 : @[Conditional.scala 39:67]
                    node _T_191 = eq(stdoutValid, UInt<1>("h00")) @[BrainfuckProcessor.scala 173:34]
                    node _T_192 = and(io.stdoutReady, _T_191) @[BrainfuckProcessor.scala 173:31]
                    when _T_192 : @[BrainfuckProcessor.scala 173:48]
                      node _T_193 = bits(reset, 0, 0) @[BrainfuckProcessor.scala 175:19]
                      node _T_195 = eq(_T_193, UInt<1>("h00")) @[BrainfuckProcessor.scala 175:19]
                      when _T_195 : @[BrainfuckProcessor.scala 175:19]
                        printf(clock, UInt<1>(1), "[stdout] %c %d\n", stackData, stackData) @[BrainfuckProcessor.scala 175:19]
                        skip @[BrainfuckProcessor.scala 175:19]
                      stdoutData <= stackData @[BrainfuckProcessor.scala 176:24]
                      stdoutValid <= UInt<1>("h01") @[BrainfuckProcessor.scala 177:25]
                      node _T_198 = add(pc, UInt<1>("h01")) @[BrainfuckProcessor.scala 179:23]
                      node _T_199 = tail(_T_198, 1) @[BrainfuckProcessor.scala 179:23]
                      pc <= _T_199 @[BrainfuckProcessor.scala 179:16]
                      node _T_201 = add(pc, UInt<1>("h01")) @[BrainfuckProcessor.scala 180:37]
                      node _T_202 = tail(_T_201, 1) @[BrainfuckProcessor.scala 180:37]
                      read mport _T_203 = instMem[_T_202], clock @[BrainfuckProcessor.scala 180:33]
                      inst <= _T_203 @[BrainfuckProcessor.scala 180:18]
                      skip @[BrainfuckProcessor.scala 173:48]
                    skip @[Conditional.scala 39:67]
                  else : @[Conditional.scala 39:67]
                    node _T_205 = eq(UInt<6>("h02c"), inst) @[Conditional.scala 37:30]
                    when _T_205 : @[Conditional.scala 39:67]
                      node _T_207 = eq(stdinAck, UInt<1>("h00")) @[BrainfuckProcessor.scala 185:33]
                      node _T_208 = and(io.stdinValid, _T_207) @[BrainfuckProcessor.scala 185:30]
                      when _T_208 : @[BrainfuckProcessor.scala 185:44]
                        stdinAck <= UInt<1>("h01") @[BrainfuckProcessor.scala 186:22]
                        write mport _T_210 = stackMem[stackPtr], clock
                        _T_210 <= io.stdinData
                        node _T_212 = add(pc, UInt<1>("h01")) @[BrainfuckProcessor.scala 189:23]
                        node _T_213 = tail(_T_212, 1) @[BrainfuckProcessor.scala 189:23]
                        pc <= _T_213 @[BrainfuckProcessor.scala 189:16]
                        node _T_215 = add(pc, UInt<1>("h01")) @[BrainfuckProcessor.scala 190:37]
                        node _T_216 = tail(_T_215, 1) @[BrainfuckProcessor.scala 190:37]
                        read mport _T_217 = instMem[_T_216], clock @[BrainfuckProcessor.scala 190:33]
                        inst <= _T_217 @[BrainfuckProcessor.scala 190:18]
                        stackData <= io.stdinData @[BrainfuckProcessor.scala 191:23]
                        skip @[BrainfuckProcessor.scala 185:44]
                      skip @[Conditional.scala 39:67]
                    else : @[Conditional.scala 39:67]
                      node _T_219 = eq(UInt<7>("h05b"), inst) @[Conditional.scala 37:30]
                      when _T_219 : @[Conditional.scala 39:67]
                        node _T_221 = eq(stackData, UInt<1>("h00")) @[BrainfuckProcessor.scala 195:26]
                        when _T_221 : @[BrainfuckProcessor.scala 195:35]
                          branchJump <= UInt<1>("h01") @[BrainfuckProcessor.scala 197:24]
                          branchJumpNest <= UInt<1>("h00") @[BrainfuckProcessor.scala 198:28]
                          node _T_225 = add(pc, UInt<1>("h01")) @[BrainfuckProcessor.scala 199:23]
                          node _T_226 = tail(_T_225, 1) @[BrainfuckProcessor.scala 199:23]
                          pc <= _T_226 @[BrainfuckProcessor.scala 199:16]
                          node _T_228 = add(pc, UInt<1>("h01")) @[BrainfuckProcessor.scala 200:37]
                          node _T_229 = tail(_T_228, 1) @[BrainfuckProcessor.scala 200:37]
                          read mport _T_230 = instMem[_T_229], clock @[BrainfuckProcessor.scala 200:33]
                          inst <= _T_230 @[BrainfuckProcessor.scala 200:18]
                          skip @[BrainfuckProcessor.scala 195:35]
                        else : @[BrainfuckProcessor.scala 201:24]
                          write mport _T_231 = branchStackMem[branchStackPtr], clock
                          _T_231 <= pc
                          node _T_233 = add(pc, UInt<1>("h01")) @[BrainfuckProcessor.scala 204:23]
                          node _T_234 = tail(_T_233, 1) @[BrainfuckProcessor.scala 204:23]
                          pc <= _T_234 @[BrainfuckProcessor.scala 204:16]
                          node _T_236 = add(pc, UInt<1>("h01")) @[BrainfuckProcessor.scala 205:37]
                          node _T_237 = tail(_T_236, 1) @[BrainfuckProcessor.scala 205:37]
                          read mport _T_238 = instMem[_T_237], clock @[BrainfuckProcessor.scala 205:33]
                          inst <= _T_238 @[BrainfuckProcessor.scala 205:18]
                          node _T_240 = add(branchStackPtr, UInt<1>("h01")) @[BrainfuckProcessor.scala 206:47]
                          node _T_241 = tail(_T_240, 1) @[BrainfuckProcessor.scala 206:47]
                          branchStackPtr <= _T_241 @[BrainfuckProcessor.scala 206:28]
                          branchStackData <= pc @[BrainfuckProcessor.scala 207:29]
                          skip @[BrainfuckProcessor.scala 201:24]
                        skip @[Conditional.scala 39:67]
                      else : @[Conditional.scala 39:67]
                        node _T_243 = eq(UInt<7>("h05d"), inst) @[Conditional.scala 37:30]
                        when _T_243 : @[Conditional.scala 39:67]
                          pc <= branchStackData @[BrainfuckProcessor.scala 212:14]
                          inst <= UInt<7>("h05b") @[BrainfuckProcessor.scala 213:16]
                          node _T_246 = gt(branchStackPtr, UInt<1>("h01")) @[BrainfuckProcessor.scala 215:31]
                          when _T_246 : @[BrainfuckProcessor.scala 215:38]
                            node _T_248 = sub(branchStackPtr, UInt<1>("h01")) @[BrainfuckProcessor.scala 216:47]
                            node _T_249 = asUInt(_T_248) @[BrainfuckProcessor.scala 216:47]
                            node _T_250 = tail(_T_249, 1) @[BrainfuckProcessor.scala 216:47]
                            branchStackPtr <= _T_250 @[BrainfuckProcessor.scala 216:28]
                            node _T_252 = sub(branchStackPtr, UInt<2>("h02")) @[BrainfuckProcessor.scala 217:67]
                            node _T_253 = asUInt(_T_252) @[BrainfuckProcessor.scala 217:67]
                            node _T_254 = tail(_T_253, 1) @[BrainfuckProcessor.scala 217:67]
                            read mport _T_255 = branchStackMem[_T_254], clock @[BrainfuckProcessor.scala 217:51]
                            branchStackData <= _T_255 @[BrainfuckProcessor.scala 217:29]
                            skip @[BrainfuckProcessor.scala 215:38]
                          else : @[BrainfuckProcessor.scala 218:23]
                            branchStackPtr <= UInt<1>("h00") @[BrainfuckProcessor.scala 220:28]
                            branchStackData <= UInt<1>("h00") @[BrainfuckProcessor.scala 221:29]
                            skip @[BrainfuckProcessor.scala 218:23]
                          skip @[Conditional.scala 39:67]
                        else : @[Conditional.scala 39:67]
                          node _T_263 = eq(UInt<4>("h0d"), inst) @[Conditional.scala 37:30]
                          node _T_264 = eq(UInt<4>("h0a"), inst) @[Conditional.scala 37:30]
                          node _T_265 = eq(UInt<6>("h020"), inst) @[Conditional.scala 37:30]
                          node _T_266 = eq(UInt<7>("h058"), inst) @[Conditional.scala 37:30]
                          node _T_267 = eq(UInt<7>("h078"), inst) @[Conditional.scala 37:30]
                          node _T_268 = or(_T_263, _T_264) @[Conditional.scala 37:55]
                          node _T_269 = or(_T_268, _T_265) @[Conditional.scala 37:55]
                          node _T_270 = or(_T_269, _T_266) @[Conditional.scala 37:55]
                          node _T_271 = or(_T_270, _T_267) @[Conditional.scala 37:55]
                          when _T_271 : @[Conditional.scala 39:67]
                            node _T_273 = add(pc, UInt<1>("h01")) @[BrainfuckProcessor.scala 226:21]
                            node _T_274 = tail(_T_273, 1) @[BrainfuckProcessor.scala 226:21]
                            pc <= _T_274 @[BrainfuckProcessor.scala 226:14]
                            node _T_276 = add(pc, UInt<1>("h01")) @[BrainfuckProcessor.scala 227:35]
                            node _T_277 = tail(_T_276, 1) @[BrainfuckProcessor.scala 227:35]
                            read mport _T_278 = instMem[_T_277], clock @[BrainfuckProcessor.scala 227:31]
                            inst <= _T_278 @[BrainfuckProcessor.scala 227:16]
                            skip @[Conditional.scala 39:67]
        skip @[BrainfuckProcessor.scala 128:18]
      skip @[BrainfuckProcessor.scala 99:17]
    else : @[BrainfuckProcessor.scala 231:16]
      branchJump <= UInt<1>("h00") @[BrainfuckProcessor.scala 233:16]
      branchJumpNest <= UInt<1>("h00") @[BrainfuckProcessor.scala 234:20]
      pc <= UInt<1>("h00") @[BrainfuckProcessor.scala 235:8]
      read mport _T_283 = instMem[UInt<1>("h00")], clock @[BrainfuckProcessor.scala 236:25]
      inst <= _T_283 @[BrainfuckProcessor.scala 236:10]
      stackPtr <= UInt<1>("h00") @[BrainfuckProcessor.scala 237:14]
      read mport _T_286 = stackMem[UInt<1>("h00")], clock @[BrainfuckProcessor.scala 238:31]
      stackData <= _T_286 @[BrainfuckProcessor.scala 238:15]
      branchStackPtr <= UInt<1>("h00") @[BrainfuckProcessor.scala 239:20]
      branchStackData <= UInt<1>("h00") @[BrainfuckProcessor.scala 240:21]
      skip @[BrainfuckProcessor.scala 231:16]
    reg run : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[BrainfuckProcessor.scala 243:20]
    reg run2 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[BrainfuckProcessor.scala 244:21]
    run <= io.run @[BrainfuckProcessor.scala 245:7]
    run2 <= run @[BrainfuckProcessor.scala 246:8]
    when halted : @[BrainfuckProcessor.scala 247:16]
      node _T_294 = eq(run2, UInt<1>("h00")) @[BrainfuckProcessor.scala 248:11]
      node _T_295 = and(_T_294, run) @[BrainfuckProcessor.scala 248:17]
      node _T_297 = eq(io.program, UInt<1>("h00")) @[BrainfuckProcessor.scala 248:28]
      node _T_298 = and(_T_295, _T_297) @[BrainfuckProcessor.scala 248:25]
      when _T_298 : @[BrainfuckProcessor.scala 248:41]
        node _T_299 = bits(reset, 0, 0) @[BrainfuckProcessor.scala 249:13]
        node _T_301 = eq(_T_299, UInt<1>("h00")) @[BrainfuckProcessor.scala 249:13]
        when _T_301 : @[BrainfuckProcessor.scala 249:13]
          printf(clock, UInt<1>(1), "[run] Trigger!\n") @[BrainfuckProcessor.scala 249:13]
          skip @[BrainfuckProcessor.scala 249:13]
        errorCode <= UInt<1>("h00") @[BrainfuckProcessor.scala 250:17]
        halted <= UInt<1>("h00") @[BrainfuckProcessor.scala 251:14]
        skip @[BrainfuckProcessor.scala 248:41]
      skip @[BrainfuckProcessor.scala 247:16]
    reg programDelay : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[BrainfuckProcessor.scala 255:29]
    node _T_307 = eq(io.program, UInt<1>("h00")) @[BrainfuckProcessor.scala 256:8]
    node _T_309 = eq(halted, UInt<1>("h00")) @[BrainfuckProcessor.scala 256:23]
    node _T_310 = or(_T_307, _T_309) @[BrainfuckProcessor.scala 256:20]
    when _T_310 : @[BrainfuckProcessor.scala 256:32]
      programAddr <= UInt<1>("h00") @[BrainfuckProcessor.scala 257:17]
      programReady <= UInt<1>("h00") @[BrainfuckProcessor.scala 258:18]
      programDelay <= UInt<1>("h00") @[BrainfuckProcessor.scala 259:18]
      skip @[BrainfuckProcessor.scala 256:32]
    else : @[BrainfuckProcessor.scala 260:16]
      programReady <= UInt<1>("h01") @[BrainfuckProcessor.scala 262:18]
      when programDelay : @[BrainfuckProcessor.scala 264:24]
        programAck <= UInt<1>("h00") @[BrainfuckProcessor.scala 266:18]
        programDelay <= UInt<1>("h00") @[BrainfuckProcessor.scala 267:20]
        skip @[BrainfuckProcessor.scala 264:24]
      else : @[BrainfuckProcessor.scala 268:34]
        when io.programValid : @[BrainfuckProcessor.scala 268:34]
          node _T_317 = bits(reset, 0, 0) @[BrainfuckProcessor.scala 270:13]
          node _T_319 = eq(_T_317, UInt<1>("h00")) @[BrainfuckProcessor.scala 270:13]
          when _T_319 : @[BrainfuckProcessor.scala 270:13]
            printf(clock, UInt<1>(1), "[program] Write programAddr:%d data:%c (%d)\n", programAddr, io.programData, io.programData) @[BrainfuckProcessor.scala 270:13]
            skip @[BrainfuckProcessor.scala 270:13]
          programAck <= UInt<1>("h01") @[BrainfuckProcessor.scala 271:18]
          programDelay <= UInt<1>("h01") @[BrainfuckProcessor.scala 272:20]
          write mport _T_322 = instMem[programAddr], clock
          _T_322 <= io.programData
          node _T_324 = add(programAddr, UInt<1>("h01")) @[BrainfuckProcessor.scala 274:34]
          node _T_325 = tail(_T_324, 1) @[BrainfuckProcessor.scala 274:34]
          programAddr <= _T_325 @[BrainfuckProcessor.scala 274:19]
          stdoutData <= io.programData @[BrainfuckProcessor.scala 277:18]
          stdoutValid <= UInt<1>("h01") @[BrainfuckProcessor.scala 278:19]
          skip @[BrainfuckProcessor.scala 268:34]
      skip @[BrainfuckProcessor.scala 260:16]
    
  module UntiChatter : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip din : UInt<1>, dout : UInt<1>}
    
    reg counter : UInt<20>, clock with : (reset => (reset, UInt<1>("h00"))) @[UntiChatter.scala 18:24]
    reg trigger : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[UntiChatter.scala 19:24]
    node _T_9 = lt(counter, UInt<19>("h07a120")) @[UntiChatter.scala 20:16]
    when _T_9 : @[UntiChatter.scala 20:30]
      node _T_11 = add(counter, UInt<1>("h01")) @[UntiChatter.scala 21:24]
      node _T_12 = tail(_T_11, 1) @[UntiChatter.scala 21:24]
      counter <= _T_12 @[UntiChatter.scala 21:13]
      trigger <= UInt<1>("h00") @[UntiChatter.scala 22:13]
      skip @[UntiChatter.scala 20:30]
    else : @[UntiChatter.scala 23:16]
      counter <= UInt<1>("h00") @[UntiChatter.scala 24:13]
      trigger <= UInt<1>("h01") @[UntiChatter.scala 25:13]
      skip @[UntiChatter.scala 23:16]
    reg dout : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[UntiChatter.scala 28:21]
    io.dout <= dout @[UntiChatter.scala 29:11]
    reg captureData : UInt<8>, clock with : (reset => (reset, UInt<1>("h00"))) @[UntiChatter.scala 30:28]
    when trigger : @[UntiChatter.scala 31:18]
      node _T_20 = shl(captureData, 1) @[UntiChatter.scala 32:33]
      node _T_23 = mux(io.din, UInt<1>("h01"), UInt<1>("h00")) @[UntiChatter.scala 32:51]
      node _T_24 = add(_T_20, _T_23) @[UntiChatter.scala 32:46]
      node _T_25 = tail(_T_24, 1) @[UntiChatter.scala 32:46]
      captureData <= _T_25 @[UntiChatter.scala 32:17]
      node _T_26 = not(captureData) @[UntiChatter.scala 33:43]
      node _T_28 = eq(_T_26, UInt<1>("h00")) @[UntiChatter.scala 33:43]
      dout <= _T_28 @[UntiChatter.scala 33:10]
      skip @[UntiChatter.scala 31:18]
    
  module UntiChatter_1 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip din : UInt<1>, dout : UInt<1>}
    
    reg counter : UInt<20>, clock with : (reset => (reset, UInt<1>("h00"))) @[UntiChatter.scala 18:24]
    reg trigger : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[UntiChatter.scala 19:24]
    node _T_9 = lt(counter, UInt<19>("h07a120")) @[UntiChatter.scala 20:16]
    when _T_9 : @[UntiChatter.scala 20:30]
      node _T_11 = add(counter, UInt<1>("h01")) @[UntiChatter.scala 21:24]
      node _T_12 = tail(_T_11, 1) @[UntiChatter.scala 21:24]
      counter <= _T_12 @[UntiChatter.scala 21:13]
      trigger <= UInt<1>("h00") @[UntiChatter.scala 22:13]
      skip @[UntiChatter.scala 20:30]
    else : @[UntiChatter.scala 23:16]
      counter <= UInt<1>("h00") @[UntiChatter.scala 24:13]
      trigger <= UInt<1>("h01") @[UntiChatter.scala 25:13]
      skip @[UntiChatter.scala 23:16]
    reg dout : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[UntiChatter.scala 28:21]
    io.dout <= dout @[UntiChatter.scala 29:11]
    reg captureData : UInt<8>, clock with : (reset => (reset, UInt<1>("h00"))) @[UntiChatter.scala 30:28]
    when trigger : @[UntiChatter.scala 31:18]
      node _T_20 = shl(captureData, 1) @[UntiChatter.scala 32:33]
      node _T_23 = mux(io.din, UInt<1>("h01"), UInt<1>("h00")) @[UntiChatter.scala 32:51]
      node _T_24 = add(_T_20, _T_23) @[UntiChatter.scala 32:46]
      node _T_25 = tail(_T_24, 1) @[UntiChatter.scala 32:46]
      captureData <= _T_25 @[UntiChatter.scala 32:17]
      node _T_26 = not(captureData) @[UntiChatter.scala 33:43]
      node _T_28 = eq(_T_26, UInt<1>("h00")) @[UntiChatter.scala 33:43]
      dout <= _T_28 @[UntiChatter.scala 33:10]
      skip @[UntiChatter.scala 31:18]
    
  module Fifo : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip inData : UInt<8>, flip inValid : UInt<1>, inReady : UInt<1>, inAck : UInt<1>, outData : UInt<8>, outValid : UInt<1>, flip outReady : UInt<1>, flip outAck : UInt<1>, empty : UInt<1>, full : UInt<1>, inPtr : UInt<4>, outPtr : UInt<4>}
    
    reg inReady : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Fifo.scala 26:24]
    reg inAck : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Fifo.scala 27:22]
    reg outData : UInt<8>, clock with : (reset => (reset, UInt<1>("h00"))) @[Fifo.scala 28:24]
    reg outValid : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Fifo.scala 29:25]
    io.inReady <= inReady @[Fifo.scala 30:14]
    io.inAck <= inAck @[Fifo.scala 31:12]
    io.outData <= outData @[Fifo.scala 32:14]
    io.outValid <= outValid @[Fifo.scala 33:15]
    cmem mem : UInt<8>[16] @[Fifo.scala 36:16]
    reg inPtr : UInt<4>, clock with : (reset => (reset, UInt<1>("h01"))) @[Fifo.scala 38:22]
    reg outPtr : UInt<4>, clock with : (reset => (reset, UInt<1>("h00"))) @[Fifo.scala 39:23]
    io.inPtr <= inPtr @[Fifo.scala 40:12]
    io.outPtr <= outPtr @[Fifo.scala 41:13]
    node _T_28 = leq(outPtr, inPtr) @[Fifo.scala 47:12]
    node _T_29 = sub(inPtr, outPtr) @[Fifo.scala 48:11]
    node _T_30 = asUInt(_T_29) @[Fifo.scala 48:11]
    node _T_31 = tail(_T_30, 1) @[Fifo.scala 48:11]
    node _T_33 = sub(_T_31, UInt<1>("h01")) @[Fifo.scala 48:20]
    node _T_34 = asUInt(_T_33) @[Fifo.scala 48:20]
    node _T_35 = tail(_T_34, 1) @[Fifo.scala 48:20]
    node _T_37 = sub(UInt<5>("h010"), outPtr) @[Fifo.scala 49:14]
    node _T_38 = asUInt(_T_37) @[Fifo.scala 49:14]
    node _T_39 = tail(_T_38, 1) @[Fifo.scala 49:14]
    node _T_41 = sub(_T_39, UInt<1>("h01")) @[Fifo.scala 49:23]
    node _T_42 = asUInt(_T_41) @[Fifo.scala 49:23]
    node _T_43 = tail(_T_42, 1) @[Fifo.scala 49:23]
    node _T_44 = add(_T_43, inPtr) @[Fifo.scala 49:30]
    node _T_45 = tail(_T_44, 1) @[Fifo.scala 49:30]
    node count = mux(_T_28, _T_35, _T_45) @[Fifo.scala 46:18]
    node empty = eq(count, UInt<1>("h00")) @[Fifo.scala 51:21]
    node _T_49 = sub(UInt<5>("h010"), UInt<2>("h03")) @[Fifo.scala 52:33]
    node _T_50 = asUInt(_T_49) @[Fifo.scala 52:33]
    node _T_51 = tail(_T_50, 1) @[Fifo.scala 52:33]
    node full = eq(count, _T_51) @[Fifo.scala 52:20]
    node _T_54 = sub(UInt<5>("h010"), UInt<1>("h01")) @[Fifo.scala 53:39]
    node _T_55 = asUInt(_T_54) @[Fifo.scala 53:39]
    node _T_56 = tail(_T_55, 1) @[Fifo.scala 53:39]
    node _T_57 = lt(inPtr, _T_56) @[Fifo.scala 53:29]
    node _T_59 = add(inPtr, UInt<1>("h01")) @[Fifo.scala 53:52]
    node _T_60 = tail(_T_59, 1) @[Fifo.scala 53:52]
    node inPtrNext = mux(_T_57, _T_60, UInt<1>("h00")) @[Fifo.scala 53:22]
    node _T_64 = sub(UInt<5>("h010"), UInt<1>("h01")) @[Fifo.scala 54:41]
    node _T_65 = asUInt(_T_64) @[Fifo.scala 54:41]
    node _T_66 = tail(_T_65, 1) @[Fifo.scala 54:41]
    node _T_67 = lt(outPtr, _T_66) @[Fifo.scala 54:31]
    node _T_69 = add(outPtr, UInt<1>("h01")) @[Fifo.scala 54:55]
    node _T_70 = tail(_T_69, 1) @[Fifo.scala 54:55]
    node outPtrNext = mux(_T_67, _T_70, UInt<1>("h00")) @[Fifo.scala 54:23]
    io.empty <= empty @[Fifo.scala 55:12]
    io.full <= full @[Fifo.scala 56:11]
    reg inDelay : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Fifo.scala 58:24]
    when inDelay : @[Fifo.scala 59:17]
      inDelay <= UInt<1>("h00") @[Fifo.scala 60:13]
      skip @[Fifo.scala 59:17]
    else : @[Fifo.scala 61:22]
      node _T_76 = eq(full, UInt<1>("h00")) @[Fifo.scala 61:15]
      when _T_76 : @[Fifo.scala 61:22]
        when io.inValid : @[Fifo.scala 62:22]
          write mport _T_77 = mem[inPtr], clock
          _T_77 <= io.inData
          inPtr <= inPtrNext @[Fifo.scala 64:13]
          inReady <= UInt<1>("h01") @[Fifo.scala 65:15]
          inAck <= UInt<1>("h01") @[Fifo.scala 66:13]
          inDelay <= UInt<1>("h01") @[Fifo.scala 67:15]
          skip @[Fifo.scala 62:22]
        else : @[Fifo.scala 69:18]
          inReady <= UInt<1>("h01") @[Fifo.scala 71:15]
          inAck <= UInt<1>("h00") @[Fifo.scala 72:13]
          inDelay <= UInt<1>("h00") @[Fifo.scala 73:15]
          skip @[Fifo.scala 69:18]
        skip @[Fifo.scala 61:22]
      else : @[Fifo.scala 75:16]
        inReady <= UInt<1>("h00") @[Fifo.scala 76:13]
        inAck <= UInt<1>("h00") @[Fifo.scala 77:11]
        inDelay <= UInt<1>("h00") @[Fifo.scala 78:13]
        skip @[Fifo.scala 75:16]
    reg waitAck : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Fifo.scala 81:24]
    node _T_90 = eq(empty, UInt<1>("h00")) @[Fifo.scala 82:8]
    when _T_90 : @[Fifo.scala 82:16]
      when io.outReady : @[Fifo.scala 84:23]
        node _T_92 = eq(waitAck, UInt<1>("h00")) @[Fifo.scala 86:13]
        when _T_92 : @[Fifo.scala 86:23]
          read mport _T_93 = mem[outPtrNext], clock @[Fifo.scala 87:50]
          node _T_94 = bits(reset, 0, 0) @[Fifo.scala 87:15]
          node _T_96 = eq(_T_94, UInt<1>("h00")) @[Fifo.scala 87:15]
          when _T_96 : @[Fifo.scala 87:15]
            printf(clock, UInt<1>(1), "[Fifo] [dequeue] data:%d outPtr:%d count:%d\n", _T_93, outPtrNext, count) @[Fifo.scala 87:15]
            skip @[Fifo.scala 87:15]
          read mport _T_97 = mem[outPtrNext], clock @[Fifo.scala 88:28]
          outData <= _T_97 @[Fifo.scala 88:17]
          outPtr <= outPtrNext @[Fifo.scala 89:16]
          outValid <= UInt<1>("h01") @[Fifo.scala 90:18]
          waitAck <= UInt<1>("h01") @[Fifo.scala 91:17]
          skip @[Fifo.scala 86:23]
        else : @[Fifo.scala 92:20]
          when io.outAck : @[Fifo.scala 93:25]
            node _T_100 = bits(reset, 0, 0) @[Fifo.scala 95:17]
            node _T_102 = eq(_T_100, UInt<1>("h00")) @[Fifo.scala 95:17]
            when _T_102 : @[Fifo.scala 95:17]
              printf(clock, UInt<1>(1), "[Fifo] [dequeue] Ack Received\n") @[Fifo.scala 95:17]
              skip @[Fifo.scala 95:17]
            outData <= UInt<1>("h00") @[Fifo.scala 96:19]
            outValid <= UInt<1>("h00") @[Fifo.scala 97:20]
            waitAck <= UInt<1>("h00") @[Fifo.scala 98:19]
            skip @[Fifo.scala 93:25]
          skip @[Fifo.scala 92:20]
        skip @[Fifo.scala 84:23]
      else : @[Fifo.scala 101:18]
        outData <= UInt<1>("h00") @[Fifo.scala 103:15]
        outValid <= UInt<1>("h00") @[Fifo.scala 104:16]
        waitAck <= UInt<1>("h00") @[Fifo.scala 105:15]
        skip @[Fifo.scala 101:18]
      skip @[Fifo.scala 82:16]
    else : @[Fifo.scala 107:16]
      when io.outAck : @[Fifo.scala 109:21]
        outData <= UInt<1>("h00") @[Fifo.scala 111:15]
        outValid <= UInt<1>("h00") @[Fifo.scala 112:16]
        waitAck <= UInt<1>("h00") @[Fifo.scala 113:15]
        skip @[Fifo.scala 109:21]
      skip @[Fifo.scala 107:16]
    
  module Fifo_1 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip inData : UInt<8>, flip inValid : UInt<1>, inReady : UInt<1>, inAck : UInt<1>, outData : UInt<8>, outValid : UInt<1>, flip outReady : UInt<1>, flip outAck : UInt<1>, empty : UInt<1>, full : UInt<1>, inPtr : UInt<4>, outPtr : UInt<4>}
    
    reg inReady : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Fifo.scala 26:24]
    reg inAck : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Fifo.scala 27:22]
    reg outData : UInt<8>, clock with : (reset => (reset, UInt<1>("h00"))) @[Fifo.scala 28:24]
    reg outValid : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Fifo.scala 29:25]
    io.inReady <= inReady @[Fifo.scala 30:14]
    io.inAck <= inAck @[Fifo.scala 31:12]
    io.outData <= outData @[Fifo.scala 32:14]
    io.outValid <= outValid @[Fifo.scala 33:15]
    cmem mem : UInt<8>[16] @[Fifo.scala 36:16]
    reg inPtr : UInt<4>, clock with : (reset => (reset, UInt<1>("h01"))) @[Fifo.scala 38:22]
    reg outPtr : UInt<4>, clock with : (reset => (reset, UInt<1>("h00"))) @[Fifo.scala 39:23]
    io.inPtr <= inPtr @[Fifo.scala 40:12]
    io.outPtr <= outPtr @[Fifo.scala 41:13]
    node _T_28 = leq(outPtr, inPtr) @[Fifo.scala 47:12]
    node _T_29 = sub(inPtr, outPtr) @[Fifo.scala 48:11]
    node _T_30 = asUInt(_T_29) @[Fifo.scala 48:11]
    node _T_31 = tail(_T_30, 1) @[Fifo.scala 48:11]
    node _T_33 = sub(_T_31, UInt<1>("h01")) @[Fifo.scala 48:20]
    node _T_34 = asUInt(_T_33) @[Fifo.scala 48:20]
    node _T_35 = tail(_T_34, 1) @[Fifo.scala 48:20]
    node _T_37 = sub(UInt<5>("h010"), outPtr) @[Fifo.scala 49:14]
    node _T_38 = asUInt(_T_37) @[Fifo.scala 49:14]
    node _T_39 = tail(_T_38, 1) @[Fifo.scala 49:14]
    node _T_41 = sub(_T_39, UInt<1>("h01")) @[Fifo.scala 49:23]
    node _T_42 = asUInt(_T_41) @[Fifo.scala 49:23]
    node _T_43 = tail(_T_42, 1) @[Fifo.scala 49:23]
    node _T_44 = add(_T_43, inPtr) @[Fifo.scala 49:30]
    node _T_45 = tail(_T_44, 1) @[Fifo.scala 49:30]
    node count = mux(_T_28, _T_35, _T_45) @[Fifo.scala 46:18]
    node empty = eq(count, UInt<1>("h00")) @[Fifo.scala 51:21]
    node _T_49 = sub(UInt<5>("h010"), UInt<2>("h03")) @[Fifo.scala 52:33]
    node _T_50 = asUInt(_T_49) @[Fifo.scala 52:33]
    node _T_51 = tail(_T_50, 1) @[Fifo.scala 52:33]
    node full = eq(count, _T_51) @[Fifo.scala 52:20]
    node _T_54 = sub(UInt<5>("h010"), UInt<1>("h01")) @[Fifo.scala 53:39]
    node _T_55 = asUInt(_T_54) @[Fifo.scala 53:39]
    node _T_56 = tail(_T_55, 1) @[Fifo.scala 53:39]
    node _T_57 = lt(inPtr, _T_56) @[Fifo.scala 53:29]
    node _T_59 = add(inPtr, UInt<1>("h01")) @[Fifo.scala 53:52]
    node _T_60 = tail(_T_59, 1) @[Fifo.scala 53:52]
    node inPtrNext = mux(_T_57, _T_60, UInt<1>("h00")) @[Fifo.scala 53:22]
    node _T_64 = sub(UInt<5>("h010"), UInt<1>("h01")) @[Fifo.scala 54:41]
    node _T_65 = asUInt(_T_64) @[Fifo.scala 54:41]
    node _T_66 = tail(_T_65, 1) @[Fifo.scala 54:41]
    node _T_67 = lt(outPtr, _T_66) @[Fifo.scala 54:31]
    node _T_69 = add(outPtr, UInt<1>("h01")) @[Fifo.scala 54:55]
    node _T_70 = tail(_T_69, 1) @[Fifo.scala 54:55]
    node outPtrNext = mux(_T_67, _T_70, UInt<1>("h00")) @[Fifo.scala 54:23]
    io.empty <= empty @[Fifo.scala 55:12]
    io.full <= full @[Fifo.scala 56:11]
    reg inDelay : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Fifo.scala 58:24]
    when inDelay : @[Fifo.scala 59:17]
      inDelay <= UInt<1>("h00") @[Fifo.scala 60:13]
      skip @[Fifo.scala 59:17]
    else : @[Fifo.scala 61:22]
      node _T_76 = eq(full, UInt<1>("h00")) @[Fifo.scala 61:15]
      when _T_76 : @[Fifo.scala 61:22]
        when io.inValid : @[Fifo.scala 62:22]
          write mport _T_77 = mem[inPtr], clock
          _T_77 <= io.inData
          inPtr <= inPtrNext @[Fifo.scala 64:13]
          inReady <= UInt<1>("h01") @[Fifo.scala 65:15]
          inAck <= UInt<1>("h01") @[Fifo.scala 66:13]
          inDelay <= UInt<1>("h01") @[Fifo.scala 67:15]
          skip @[Fifo.scala 62:22]
        else : @[Fifo.scala 69:18]
          inReady <= UInt<1>("h01") @[Fifo.scala 71:15]
          inAck <= UInt<1>("h00") @[Fifo.scala 72:13]
          inDelay <= UInt<1>("h00") @[Fifo.scala 73:15]
          skip @[Fifo.scala 69:18]
        skip @[Fifo.scala 61:22]
      else : @[Fifo.scala 75:16]
        inReady <= UInt<1>("h00") @[Fifo.scala 76:13]
        inAck <= UInt<1>("h00") @[Fifo.scala 77:11]
        inDelay <= UInt<1>("h00") @[Fifo.scala 78:13]
        skip @[Fifo.scala 75:16]
    reg waitAck : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Fifo.scala 81:24]
    node _T_90 = eq(empty, UInt<1>("h00")) @[Fifo.scala 82:8]
    when _T_90 : @[Fifo.scala 82:16]
      when io.outReady : @[Fifo.scala 84:23]
        node _T_92 = eq(waitAck, UInt<1>("h00")) @[Fifo.scala 86:13]
        when _T_92 : @[Fifo.scala 86:23]
          read mport _T_93 = mem[outPtrNext], clock @[Fifo.scala 87:50]
          node _T_94 = bits(reset, 0, 0) @[Fifo.scala 87:15]
          node _T_96 = eq(_T_94, UInt<1>("h00")) @[Fifo.scala 87:15]
          when _T_96 : @[Fifo.scala 87:15]
            printf(clock, UInt<1>(1), "[Fifo] [dequeue] data:%d outPtr:%d count:%d\n", _T_93, outPtrNext, count) @[Fifo.scala 87:15]
            skip @[Fifo.scala 87:15]
          read mport _T_97 = mem[outPtrNext], clock @[Fifo.scala 88:28]
          outData <= _T_97 @[Fifo.scala 88:17]
          outPtr <= outPtrNext @[Fifo.scala 89:16]
          outValid <= UInt<1>("h01") @[Fifo.scala 90:18]
          waitAck <= UInt<1>("h01") @[Fifo.scala 91:17]
          skip @[Fifo.scala 86:23]
        else : @[Fifo.scala 92:20]
          when io.outAck : @[Fifo.scala 93:25]
            node _T_100 = bits(reset, 0, 0) @[Fifo.scala 95:17]
            node _T_102 = eq(_T_100, UInt<1>("h00")) @[Fifo.scala 95:17]
            when _T_102 : @[Fifo.scala 95:17]
              printf(clock, UInt<1>(1), "[Fifo] [dequeue] Ack Received\n") @[Fifo.scala 95:17]
              skip @[Fifo.scala 95:17]
            outData <= UInt<1>("h00") @[Fifo.scala 96:19]
            outValid <= UInt<1>("h00") @[Fifo.scala 97:20]
            waitAck <= UInt<1>("h00") @[Fifo.scala 98:19]
            skip @[Fifo.scala 93:25]
          skip @[Fifo.scala 92:20]
        skip @[Fifo.scala 84:23]
      else : @[Fifo.scala 101:18]
        outData <= UInt<1>("h00") @[Fifo.scala 103:15]
        outValid <= UInt<1>("h00") @[Fifo.scala 104:16]
        waitAck <= UInt<1>("h00") @[Fifo.scala 105:15]
        skip @[Fifo.scala 101:18]
      skip @[Fifo.scala 82:16]
    else : @[Fifo.scala 107:16]
      when io.outAck : @[Fifo.scala 109:21]
        outData <= UInt<1>("h00") @[Fifo.scala 111:15]
        outValid <= UInt<1>("h00") @[Fifo.scala 112:16]
        waitAck <= UInt<1>("h00") @[Fifo.scala 113:15]
        skip @[Fifo.scala 109:21]
      skip @[Fifo.scala 107:16]
    
  module DebugAccessPort : 
    input clock : Clock
    input reset : UInt<1>
    output io : {uartTx : UInt<1>, flip uartRx : UInt<1>, flip switches : UInt<1>[4], leds : UInt<1>[4], triLed0 : UInt<3>, triLed1 : UInt<3>, triLed2 : UInt<3>, triLed3 : UInt<3>}
    
    inst uart of UartTxRx @[DebugAccessPort.scala 37:20]
    uart.clock <= clock
    uart.reset <= reset
    inst bf of BrainfuckProcessor @[DebugAccessPort.scala 38:18]
    bf.clock <= clock
    bf.reset <= reset
    inst chatterProgram of UntiChatter @[DebugAccessPort.scala 42:30]
    chatterProgram.clock <= clock
    chatterProgram.reset <= reset
    wire program : UInt<1> @[DebugAccessPort.scala 43:21]
    chatterProgram.io.din <= io.switches[0] @[DebugAccessPort.scala 44:18]
    program <= chatterProgram.io.dout @[DebugAccessPort.scala 45:11]
    bf.io.program <= program @[DebugAccessPort.scala 46:17]
    inst chatterRun of UntiChatter_1 @[DebugAccessPort.scala 47:26]
    chatterRun.clock <= clock
    chatterRun.reset <= reset
    wire run : UInt<1> @[DebugAccessPort.scala 48:17]
    chatterRun.io.din <= io.switches[1] @[DebugAccessPort.scala 49:18]
    run <= chatterRun.io.dout @[DebugAccessPort.scala 50:7]
    bf.io.run <= run @[DebugAccessPort.scala 51:13]
    reg statusInst : UInt<8>, clock with : (reset => (reset, UInt<1>("h00"))) @[DebugAccessPort.scala 55:27]
    statusInst <= bf.io.inst @[DebugAccessPort.scala 56:14]
    io.leds[0] <= program @[DebugAccessPort.scala 57:14]
    io.leds[1] <= run @[DebugAccessPort.scala 58:14]
    io.leds[2] <= bf.io.stdoutValid @[DebugAccessPort.scala 59:14]
    io.leds[3] <= bf.io.halted @[DebugAccessPort.scala 60:14]
    node _T_30 = bits(statusInst, 2, 0) @[DebugAccessPort.scala 61:27]
    io.triLed0 <= _T_30 @[DebugAccessPort.scala 61:14]
    node _T_31 = bits(statusInst, 5, 3) @[DebugAccessPort.scala 62:27]
    io.triLed1 <= _T_31 @[DebugAccessPort.scala 62:14]
    node _T_32 = bits(statusInst, 7, 6) @[DebugAccessPort.scala 63:27]
    io.triLed2 <= _T_32 @[DebugAccessPort.scala 63:14]
    io.triLed3 <= bf.io.errorCode @[DebugAccessPort.scala 64:14]
    io.uartTx <= uart.io.tx @[DebugAccessPort.scala 67:14]
    uart.io.rx <= io.uartRx @[DebugAccessPort.scala 68:14]
    inst fifoUartToBf of Fifo @[DebugAccessPort.scala 73:28]
    fifoUartToBf.clock <= clock
    fifoUartToBf.reset <= reset
    fifoUartToBf.io.inData <= uart.io.rxData @[DebugAccessPort.scala 74:18]
    uart.io.rxReady <= fifoUartToBf.io.inReady @[DebugAccessPort.scala 75:19]
    fifoUartToBf.io.inValid <= uart.io.rxValid @[DebugAccessPort.scala 76:19]
    uart.io.rxAck <= fifoUartToBf.io.inAck @[DebugAccessPort.scala 77:17]
    bf.io.programData <= fifoUartToBf.io.outData @[DebugAccessPort.scala 79:21]
    bf.io.stdinData <= fifoUartToBf.io.outData @[DebugAccessPort.scala 80:19]
    node _T_34 = mux(program, fifoUartToBf.io.outValid, UInt<1>("h00")) @[DebugAccessPort.scala 81:28]
    bf.io.programValid <= _T_34 @[DebugAccessPort.scala 81:22]
    node _T_36 = eq(program, UInt<1>("h00")) @[DebugAccessPort.scala 82:27]
    node _T_38 = mux(_T_36, fifoUartToBf.io.outValid, UInt<1>("h00")) @[DebugAccessPort.scala 82:26]
    bf.io.stdinValid <= _T_38 @[DebugAccessPort.scala 82:20]
    node _T_39 = mux(program, bf.io.programReady, bf.io.stdinReady) @[DebugAccessPort.scala 83:34]
    fifoUartToBf.io.outReady <= _T_39 @[DebugAccessPort.scala 83:28]
    node _T_40 = mux(program, bf.io.programAck, bf.io.stdinAck) @[DebugAccessPort.scala 84:32]
    fifoUartToBf.io.outAck <= _T_40 @[DebugAccessPort.scala 84:26]
    inst fifoBfToUart of Fifo_1 @[DebugAccessPort.scala 87:28]
    fifoBfToUart.clock <= clock
    fifoBfToUart.reset <= reset
    uart.io.txData <= fifoBfToUart.io.outData @[DebugAccessPort.scala 88:18]
    fifoBfToUart.io.outReady <= uart.io.txReady @[DebugAccessPort.scala 89:19]
    uart.io.txValid <= fifoBfToUart.io.outValid @[DebugAccessPort.scala 90:19]
    fifoBfToUart.io.outAck <= uart.io.txAck @[DebugAccessPort.scala 91:17]
    fifoBfToUart.io.inData <= bf.io.stdoutData @[DebugAccessPort.scala 93:20]
    bf.io.stdoutReady <= fifoBfToUart.io.inReady @[DebugAccessPort.scala 94:21]
    fifoBfToUart.io.inValid <= bf.io.stdoutValid @[DebugAccessPort.scala 95:21]
    bf.io.stdoutAck <= fifoBfToUart.io.inAck @[DebugAccessPort.scala 96:19]
    
