;buildInfoPackage: chisel3, version: 3.0.2, scalaVersion: 2.12.3, sbtVersion: 0.13.16, builtAtString: 2018-02-05 23:26:31.979, builtAtMillis: 1517873191979
circuit DebugAccessPort : 
  module UartTxRx : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip rx : UInt<1>, tx : UInt<1>, rxData : UInt<8>, flip rxReady : UInt<1>, rxValid : UInt<1>, flip rxAck : UInt<1>, flip txData : UInt<8>, txReady : UInt<1>, flip txValid : UInt<1>, txAck : UInt<1>, rxActive : UInt<1>, txActive : UInt<1>, rxDebugBuf : UInt<8>, txDebugBuf : UInt<8>}
    
    reg tx : UInt<1>, clock with : (reset => (reset, UInt<1>("h01"))) @[UartTxRx.scala 30:19]
    reg rxData : UInt<8>, clock with : (reset => (reset, UInt<1>("h00"))) @[UartTxRx.scala 31:23]
    reg rxValid : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[UartTxRx.scala 32:24]
    reg txReady : UInt<1>, clock with : (reset => (reset, UInt<1>("h01"))) @[UartTxRx.scala 33:24]
    reg txAck : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[UartTxRx.scala 34:22]
    io.tx <= tx @[UartTxRx.scala 35:9]
    io.rxData <= rxData @[UartTxRx.scala 36:13]
    io.rxValid <= rxValid @[UartTxRx.scala 37:14]
    io.txReady <= txReady @[UartTxRx.scala 38:14]
    io.txAck <= txAck @[UartTxRx.scala 39:12]
    reg rxActive : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[UartTxRx.scala 48:25]
    io.rxActive <= rxActive @[UartTxRx.scala 49:15]
    reg rxTrigger : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[UartTxRx.scala 50:26]
    reg rxDurationCounter : SInt<15>, clock with : (reset => (reset, asSInt(UInt<1>("h00")))) @[UartTxRx.scala 51:34]
    reg rx1 : UInt<1>, clock with : (reset => (reset, UInt<1>("h01"))) @[UartTxRx.scala 52:20]
    reg rx2 : UInt<1>, clock with : (reset => (reset, UInt<1>("h01"))) @[UartTxRx.scala 53:20]
    rx1 <= io.rx @[UartTxRx.scala 54:7]
    rx2 <= rx1 @[UartTxRx.scala 55:7]
    node _T_37 = eq(rxActive, UInt<1>("h00")) @[UartTxRx.scala 56:8]
    when _T_37 : @[UartTxRx.scala 56:19]
      node _T_39 = eq(rx1, UInt<1>("h00")) @[UartTxRx.scala 57:17]
      node _T_40 = and(rx2, _T_39) @[UartTxRx.scala 57:14]
      when _T_40 : @[UartTxRx.scala 57:23]
        node _T_41 = bits(reset, 0, 0) @[UartTxRx.scala 58:13]
        node _T_43 = eq(_T_41, UInt<1>("h00")) @[UartTxRx.scala 58:13]
        when _T_43 : @[UartTxRx.scala 58:13]
          printf(clock, UInt<1>(1), "[Rx] Active\n") @[UartTxRx.scala 58:13]
          skip @[UartTxRx.scala 58:13]
        rxActive <= UInt<1>("h01") @[UartTxRx.scala 59:16]
        rxTrigger <= UInt<1>("h00") @[UartTxRx.scala 60:17]
        node _T_48 = sub(asSInt(UInt<1>("h00")), asSInt(UInt<14>("h01458"))) @[UartTxRx.scala 61:28]
        node _T_49 = tail(_T_48, 1) @[UartTxRx.scala 61:28]
        node _T_50 = asSInt(_T_49) @[UartTxRx.scala 61:28]
        rxDurationCounter <= _T_50 @[UartTxRx.scala 61:25]
        skip @[UartTxRx.scala 57:23]
      else : @[UartTxRx.scala 62:18]
        rxActive <= UInt<1>("h00") @[UartTxRx.scala 63:16]
        rxTrigger <= UInt<1>("h00") @[UartTxRx.scala 64:17]
        skip @[UartTxRx.scala 62:18]
      skip @[UartTxRx.scala 56:19]
    else : @[UartTxRx.scala 66:16]
      node _T_54 = lt(rxDurationCounter, asSInt(UInt<15>("h028b0"))) @[UartTxRx.scala 67:28]
      when _T_54 : @[UartTxRx.scala 67:42]
        node _T_56 = add(rxDurationCounter, asSInt(UInt<2>("h01"))) @[UartTxRx.scala 68:46]
        node _T_57 = tail(_T_56, 1) @[UartTxRx.scala 68:46]
        node _T_58 = asSInt(_T_57) @[UartTxRx.scala 68:46]
        rxDurationCounter <= _T_58 @[UartTxRx.scala 68:25]
        rxTrigger <= UInt<1>("h00") @[UartTxRx.scala 69:17]
        skip @[UartTxRx.scala 67:42]
      else : @[UartTxRx.scala 70:18]
        rxDurationCounter <= asSInt(UInt<1>("h00")) @[UartTxRx.scala 71:25]
        rxTrigger <= UInt<1>("h01") @[UartTxRx.scala 72:17]
        skip @[UartTxRx.scala 70:18]
      skip @[UartTxRx.scala 66:16]
    reg rxBuf : UInt<8>, clock with : (reset => (reset, UInt<1>("h00"))) @[UartTxRx.scala 76:22]
    io.rxDebugBuf <= rxBuf @[UartTxRx.scala 77:17]
    reg rxCounter : UInt<4>, clock with : (reset => (reset, UInt<1>("h00"))) @[UartTxRx.scala 78:26]
    when rxActive : @[UartTxRx.scala 79:18]
      when rxTrigger : @[UartTxRx.scala 80:21]
        node _T_67 = add(rxCounter, UInt<1>("h01")) @[UartTxRx.scala 81:30]
        node _T_68 = tail(_T_67, 1) @[UartTxRx.scala 81:30]
        rxCounter <= _T_68 @[UartTxRx.scala 81:17]
        node _T_69 = shr(rxBuf, 1) @[UartTxRx.scala 82:23]
        node _T_72 = mux(io.rx, UInt<8>("h080"), UInt<1>("h00")) @[UartTxRx.scala 82:41]
        node _T_73 = add(_T_69, _T_72) @[UartTxRx.scala 82:36]
        node _T_74 = tail(_T_73, 1) @[UartTxRx.scala 82:36]
        rxBuf <= _T_74 @[UartTxRx.scala 82:13]
        node _T_75 = bits(reset, 0, 0) @[UartTxRx.scala 83:13]
        node _T_77 = eq(_T_75, UInt<1>("h00")) @[UartTxRx.scala 83:13]
        when _T_77 : @[UartTxRx.scala 83:13]
          printf(clock, UInt<1>(1), "[Rx] [%d] rx:%d buf:%d\n", rxCounter, io.rx, rxBuf) @[UartTxRx.scala 83:13]
          skip @[UartTxRx.scala 83:13]
        node _T_79 = gt(rxCounter, UInt<3>("h07")) @[UartTxRx.scala 85:22]
        when _T_79 : @[UartTxRx.scala 85:29]
          node _T_80 = bits(reset, 0, 0) @[UartTxRx.scala 86:15]
          node _T_82 = eq(_T_80, UInt<1>("h00")) @[UartTxRx.scala 86:15]
          when _T_82 : @[UartTxRx.scala 86:15]
            printf(clock, UInt<1>(1), "[Rx] Received:%d\n", rxBuf) @[UartTxRx.scala 86:15]
            skip @[UartTxRx.scala 86:15]
          rxActive <= UInt<1>("h00") @[UartTxRx.scala 87:18]
          rxData <= rxBuf @[UartTxRx.scala 88:16]
          rxValid <= UInt<1>("h01") @[UartTxRx.scala 89:17]
          skip @[UartTxRx.scala 85:29]
        skip @[UartTxRx.scala 80:21]
      skip @[UartTxRx.scala 79:18]
    else : @[UartTxRx.scala 92:16]
      rxBuf <= UInt<1>("h00") @[UartTxRx.scala 93:11]
      rxCounter <= UInt<1>("h00") @[UartTxRx.scala 94:15]
      skip @[UartTxRx.scala 92:16]
    node _T_87 = and(rxValid, io.rxAck) @[UartTxRx.scala 97:16]
    when _T_87 : @[UartTxRx.scala 97:28]
      rxData <= UInt<1>("h00") @[UartTxRx.scala 98:12]
      rxValid <= UInt<1>("h00") @[UartTxRx.scala 99:13]
      skip @[UartTxRx.scala 97:28]
    reg txActive : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[UartTxRx.scala 103:25]
    io.txActive <= txActive @[UartTxRx.scala 104:15]
    reg txTrigger : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[UartTxRx.scala 105:26]
    reg txDurationCounter : SInt<15>, clock with : (reset => (reset, asSInt(UInt<1>("h00")))) @[UartTxRx.scala 106:34]
    reg txBuf : UInt<8>, clock with : (reset => (reset, UInt<1>("h00"))) @[UartTxRx.scala 107:22]
    io.txDebugBuf <= txBuf @[UartTxRx.scala 108:17]
    reg txCounter : UInt<4>, clock with : (reset => (reset, UInt<1>("h00"))) @[UartTxRx.scala 109:26]
    node _T_101 = eq(txActive, UInt<1>("h00")) @[UartTxRx.scala 110:8]
    when _T_101 : @[UartTxRx.scala 110:19]
      when io.txValid : @[UartTxRx.scala 111:23]
        node _T_102 = bits(reset, 0, 0) @[UartTxRx.scala 113:13]
        node _T_104 = eq(_T_102, UInt<1>("h00")) @[UartTxRx.scala 113:13]
        when _T_104 : @[UartTxRx.scala 113:13]
          printf(clock, UInt<1>(1), "[Tx] Active Bundle(rx -> %d, tx -> %d, rxData -> %d, rxReady -> %d, rxValid -> %d, rxAck -> %d, txData -> %d, txReady -> %d, txValid -> %d, txAck -> %d, rxActive -> %d, txActive -> %d, rxDebugBuf -> %d, txDebugBuf -> %d).txData\n", io.rx, io.tx, io.rxData, io.rxReady, io.rxValid, io.rxAck, io.txData, io.txReady, io.txValid, io.txAck, io.rxActive, io.txActive, io.rxDebugBuf, io.txDebugBuf) @[UartTxRx.scala 113:13]
          skip @[UartTxRx.scala 113:13]
        txActive <= UInt<1>("h01") @[UartTxRx.scala 114:16]
        txBuf <= io.txData @[UartTxRx.scala 115:13]
        txAck <= UInt<1>("h01") @[UartTxRx.scala 116:13]
        txDurationCounter <= asSInt(UInt<1>("h00")) @[UartTxRx.scala 117:25]
        skip @[UartTxRx.scala 111:23]
      else : @[UartTxRx.scala 118:18]
        txAck <= UInt<1>("h00") @[UartTxRx.scala 119:13]
        skip @[UartTxRx.scala 118:18]
      skip @[UartTxRx.scala 110:19]
    else : @[UartTxRx.scala 121:16]
      txAck <= UInt<1>("h00") @[UartTxRx.scala 122:11]
      node _T_111 = lt(txDurationCounter, asSInt(UInt<15>("h028b0"))) @[UartTxRx.scala 123:29]
      when _T_111 : @[UartTxRx.scala 123:43]
        node _T_113 = add(txDurationCounter, asSInt(UInt<2>("h01"))) @[UartTxRx.scala 124:46]
        node _T_114 = tail(_T_113, 1) @[UartTxRx.scala 124:46]
        node _T_115 = asSInt(_T_114) @[UartTxRx.scala 124:46]
        txDurationCounter <= _T_115 @[UartTxRx.scala 124:25]
        txTrigger <= UInt<1>("h00") @[UartTxRx.scala 125:17]
        skip @[UartTxRx.scala 123:43]
      else : @[UartTxRx.scala 126:18]
        txDurationCounter <= asSInt(UInt<1>("h00")) @[UartTxRx.scala 127:25]
        txTrigger <= UInt<1>("h01") @[UartTxRx.scala 128:17]
        skip @[UartTxRx.scala 126:18]
      skip @[UartTxRx.scala 121:16]
    when txActive : @[UartTxRx.scala 133:18]
      when txTrigger : @[UartTxRx.scala 134:21]
        node _T_119 = bits(reset, 0, 0) @[UartTxRx.scala 135:13]
        node _T_121 = eq(_T_119, UInt<1>("h00")) @[UartTxRx.scala 135:13]
        when _T_121 : @[UartTxRx.scala 135:13]
          printf(clock, UInt<1>(1), "[Tx] [%d] rx:%d buf:%d\n", txCounter, tx, txBuf) @[UartTxRx.scala 135:13]
          skip @[UartTxRx.scala 135:13]
        node _T_123 = eq(txCounter, UInt<1>("h00")) @[UartTxRx.scala 136:22]
        when _T_123 : @[UartTxRx.scala 136:31]
          node _T_124 = bits(reset, 0, 0) @[UartTxRx.scala 137:15]
          node _T_126 = eq(_T_124, UInt<1>("h00")) @[UartTxRx.scala 137:15]
          when _T_126 : @[UartTxRx.scala 137:15]
            printf(clock, UInt<1>(1), "[Tx] startbit\n") @[UartTxRx.scala 137:15]
            skip @[UartTxRx.scala 137:15]
          tx <= UInt<1>("h00") @[UartTxRx.scala 138:12]
          node _T_129 = add(txCounter, UInt<1>("h01")) @[UartTxRx.scala 139:32]
          node _T_130 = tail(_T_129, 1) @[UartTxRx.scala 139:32]
          txCounter <= _T_130 @[UartTxRx.scala 139:19]
          skip @[UartTxRx.scala 136:31]
        else : @[UartTxRx.scala 140:36]
          node _T_132 = lt(txCounter, UInt<4>("h09")) @[UartTxRx.scala 140:29]
          when _T_132 : @[UartTxRx.scala 140:36]
            node _T_133 = bits(reset, 0, 0) @[UartTxRx.scala 142:15]
            node _T_135 = eq(_T_133, UInt<1>("h00")) @[UartTxRx.scala 142:15]
            when _T_135 : @[UartTxRx.scala 142:15]
              printf(clock, UInt<1>(1), "[Tx] data\n") @[UartTxRx.scala 142:15]
              skip @[UartTxRx.scala 142:15]
            node _T_137 = sub(txCounter, UInt<1>("h01")) @[UartTxRx.scala 143:31]
            node _T_138 = asUInt(_T_137) @[UartTxRx.scala 143:31]
            node _T_139 = tail(_T_138, 1) @[UartTxRx.scala 143:31]
            node _T_140 = dshr(txBuf, _T_139) @[UartTxRx.scala 143:20]
            node _T_141 = bits(_T_140, 0, 0) @[UartTxRx.scala 143:20]
            tx <= _T_141 @[UartTxRx.scala 143:12]
            node _T_143 = add(txCounter, UInt<1>("h01")) @[UartTxRx.scala 144:32]
            node _T_144 = tail(_T_143, 1) @[UartTxRx.scala 144:32]
            txCounter <= _T_144 @[UartTxRx.scala 144:19]
            skip @[UartTxRx.scala 140:36]
          else : @[UartTxRx.scala 145:37]
            node _T_146 = lt(txCounter, UInt<4>("h0a")) @[UartTxRx.scala 145:29]
            when _T_146 : @[UartTxRx.scala 145:37]
              node _T_147 = bits(reset, 0, 0) @[UartTxRx.scala 147:15]
              node _T_149 = eq(_T_147, UInt<1>("h00")) @[UartTxRx.scala 147:15]
              when _T_149 : @[UartTxRx.scala 147:15]
                printf(clock, UInt<1>(1), "[Tx] stopbit\n") @[UartTxRx.scala 147:15]
                skip @[UartTxRx.scala 147:15]
              tx <= UInt<1>("h01") @[UartTxRx.scala 148:11]
              node _T_152 = add(txCounter, UInt<1>("h01")) @[UartTxRx.scala 149:32]
              node _T_153 = tail(_T_152, 1) @[UartTxRx.scala 149:32]
              txCounter <= _T_153 @[UartTxRx.scala 149:19]
              skip @[UartTxRx.scala 145:37]
            else : @[UartTxRx.scala 150:20]
              node _T_154 = bits(reset, 0, 0) @[UartTxRx.scala 152:15]
              node _T_156 = eq(_T_154, UInt<1>("h00")) @[UartTxRx.scala 152:15]
              when _T_156 : @[UartTxRx.scala 152:15]
                printf(clock, UInt<1>(1), "[Tx] fin\n") @[UartTxRx.scala 152:15]
                skip @[UartTxRx.scala 152:15]
              txActive <= UInt<1>("h00") @[UartTxRx.scala 153:18]
              tx <= UInt<1>("h01") @[UartTxRx.scala 154:12]
              txCounter <= UInt<1>("h00") @[UartTxRx.scala 155:19]
              skip @[UartTxRx.scala 150:20]
        skip @[UartTxRx.scala 134:21]
      skip @[UartTxRx.scala 133:18]
    else : @[UartTxRx.scala 158:16]
      tx <= UInt<1>("h01") @[UartTxRx.scala 159:8]
      txCounter <= UInt<1>("h00") @[UartTxRx.scala 160:15]
      skip @[UartTxRx.scala 158:16]
    
  module BrainfuckProcessor : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip run : UInt<1>, flip program : UInt<1>, flip programData : UInt<8>, flip programValid : UInt<1>, programReady : UInt<1>, programAck : UInt<1>, pc : UInt<16>, inst : UInt<8>, stackPtr : UInt<16>, stackData : UInt<8>, branchStackPtr : UInt<4>, branchStackData : UInt<16>, halted : UInt<1>, errorCode : UInt<3>, flip stdinData : UInt<8>, flip stdinValid : UInt<1>, stdinReady : UInt<1>, stdinAck : UInt<1>, stdoutData : UInt<8>, stdoutValid : UInt<1>, flip stdoutReady : UInt<1>, flip stdoutAck : UInt<1>}
    
    reg programReady : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[BrainfuckProcessor.scala 43:29]
    io.programReady <= programReady @[BrainfuckProcessor.scala 44:19]
    reg programAck : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[BrainfuckProcessor.scala 45:27]
    io.programAck <= programAck @[BrainfuckProcessor.scala 46:17]
    reg halted : UInt<1>, clock with : (reset => (reset, UInt<1>("h01"))) @[BrainfuckProcessor.scala 47:23]
    io.halted <= halted @[BrainfuckProcessor.scala 48:13]
    reg errorCode : UInt<4>, clock with : (reset => (reset, UInt<1>("h00"))) @[BrainfuckProcessor.scala 49:26]
    io.errorCode <= errorCode @[BrainfuckProcessor.scala 50:16]
    reg stdinReady : UInt<1>, clock with : (reset => (reset, UInt<1>("h01"))) @[BrainfuckProcessor.scala 51:27]
    io.stdinReady <= stdinReady @[BrainfuckProcessor.scala 52:17]
    reg stdinAck : UInt<1>, clock with : (reset => (reset, UInt<1>("h01"))) @[BrainfuckProcessor.scala 53:25]
    io.stdinAck <= stdinAck @[BrainfuckProcessor.scala 54:15]
    reg stdoutData : UInt<8>, clock with : (reset => (reset, UInt<1>("h00"))) @[BrainfuckProcessor.scala 55:27]
    io.stdoutData <= stdoutData @[BrainfuckProcessor.scala 56:17]
    reg stdoutValid : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[BrainfuckProcessor.scala 57:28]
    io.stdoutValid <= stdoutValid @[BrainfuckProcessor.scala 58:18]
    cmem instMem : UInt<8>[65536] @[BrainfuckProcessor.scala 61:20]
    reg programAddr : UInt<16>, clock with : (reset => (reset, UInt<1>("h00"))) @[BrainfuckProcessor.scala 62:28]
    cmem stackMem : UInt<8>[65536] @[BrainfuckProcessor.scala 65:21]
    reg stackPtr : UInt<16>, clock with : (reset => (reset, UInt<1>("h00"))) @[BrainfuckProcessor.scala 66:25]
    reg stackData : UInt<8>, clock with : (reset => (reset, UInt<1>("h00"))) @[BrainfuckProcessor.scala 67:26]
    io.stackPtr <= stackPtr @[BrainfuckProcessor.scala 68:15]
    io.stackData <= stackData @[BrainfuckProcessor.scala 69:16]
    cmem branchStackMem : UInt<16>[16] @[BrainfuckProcessor.scala 72:27]
    reg branchStackPtr : UInt<4>, clock with : (reset => (reset, UInt<1>("h00"))) @[BrainfuckProcessor.scala 73:31]
    reg branchStackData : UInt<16>, clock with : (reset => (reset, UInt<1>("h00"))) @[BrainfuckProcessor.scala 74:32]
    io.branchStackPtr <= branchStackPtr @[BrainfuckProcessor.scala 75:21]
    io.branchStackData <= branchStackData @[BrainfuckProcessor.scala 76:22]
    when stdinAck : @[BrainfuckProcessor.scala 79:18]
      stdinAck <= UInt<1>("h00") @[BrainfuckProcessor.scala 81:14]
      skip @[BrainfuckProcessor.scala 79:18]
    when stdoutValid : @[BrainfuckProcessor.scala 83:21]
      when io.stdoutAck : @[BrainfuckProcessor.scala 84:24]
        stdoutData <= UInt<1>("h00") @[BrainfuckProcessor.scala 85:18]
        stdoutValid <= UInt<1>("h00") @[BrainfuckProcessor.scala 86:19]
        skip @[BrainfuckProcessor.scala 84:24]
      skip @[BrainfuckProcessor.scala 83:21]
    reg branchJump : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[BrainfuckProcessor.scala 90:27]
    reg branchJumpNest : UInt<4>, clock with : (reset => (reset, UInt<1>("h00"))) @[BrainfuckProcessor.scala 91:31]
    reg inst : UInt<8>, clock with : (reset => (reset, UInt<1>("h00"))) @[BrainfuckProcessor.scala 92:21]
    reg pc : UInt<16>, clock with : (reset => (reset, UInt<1>("h00"))) @[BrainfuckProcessor.scala 93:19]
    io.inst <= inst @[BrainfuckProcessor.scala 94:11]
    io.pc <= pc @[BrainfuckProcessor.scala 95:9]
    node _T_68 = eq(halted, UInt<1>("h00")) @[BrainfuckProcessor.scala 97:8]
    when _T_68 : @[BrainfuckProcessor.scala 97:17]
      when branchJump : @[BrainfuckProcessor.scala 98:22]
        node _T_70 = add(pc, UInt<1>("h01")) @[BrainfuckProcessor.scala 100:17]
        node _T_71 = tail(_T_70, 1) @[BrainfuckProcessor.scala 100:17]
        pc <= _T_71 @[BrainfuckProcessor.scala 100:10]
        node _T_73 = add(pc, UInt<1>("h01")) @[BrainfuckProcessor.scala 101:31]
        node _T_74 = tail(_T_73, 1) @[BrainfuckProcessor.scala 101:31]
        read mport _T_75 = instMem[_T_74], clock @[BrainfuckProcessor.scala 101:27]
        inst <= _T_75 @[BrainfuckProcessor.scala 101:12]
        node _T_78 = eq(UInt<1>("h00"), inst) @[Conditional.scala 37:30]
        node _T_79 = eq(UInt<6>("h023"), inst) @[Conditional.scala 37:30]
        node _T_80 = or(_T_78, _T_79) @[Conditional.scala 37:55]
        when _T_80 : @[Conditional.scala 40:58]
          halted <= UInt<1>("h01") @[BrainfuckProcessor.scala 104:18]
          errorCode <= UInt<1>("h01") @[BrainfuckProcessor.scala 105:21]
          skip @[Conditional.scala 40:58]
        else : @[Conditional.scala 39:67]
          node _T_84 = eq(UInt<7>("h05b"), inst) @[Conditional.scala 37:30]
          when _T_84 : @[Conditional.scala 39:67]
            node _T_86 = eq(branchJumpNest, UInt<4>("h0f")) @[BrainfuckProcessor.scala 108:31]
            when _T_86 : @[BrainfuckProcessor.scala 108:63]
              halted <= UInt<1>("h01") @[BrainfuckProcessor.scala 109:20]
              errorCode <= UInt<2>("h02") @[BrainfuckProcessor.scala 110:23]
              skip @[BrainfuckProcessor.scala 108:63]
            else : @[BrainfuckProcessor.scala 111:24]
              node _T_90 = add(branchJumpNest, UInt<1>("h01")) @[BrainfuckProcessor.scala 112:47]
              node _T_91 = tail(_T_90, 1) @[BrainfuckProcessor.scala 112:47]
              branchJumpNest <= _T_91 @[BrainfuckProcessor.scala 112:28]
              skip @[BrainfuckProcessor.scala 111:24]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_93 = eq(UInt<7>("h05d"), inst) @[Conditional.scala 37:30]
            when _T_93 : @[Conditional.scala 39:67]
              node _T_95 = gt(branchJumpNest, UInt<1>("h00")) @[BrainfuckProcessor.scala 116:31]
              when _T_95 : @[BrainfuckProcessor.scala 116:38]
                node _T_97 = sub(branchJumpNest, UInt<1>("h01")) @[BrainfuckProcessor.scala 117:47]
                node _T_98 = asUInt(_T_97) @[BrainfuckProcessor.scala 117:47]
                node _T_99 = tail(_T_98, 1) @[BrainfuckProcessor.scala 117:47]
                branchJumpNest <= _T_99 @[BrainfuckProcessor.scala 117:28]
                skip @[BrainfuckProcessor.scala 116:38]
              else : @[BrainfuckProcessor.scala 118:24]
                branchJump <= UInt<1>("h00") @[BrainfuckProcessor.scala 120:24]
                branchJumpNest <= UInt<1>("h00") @[BrainfuckProcessor.scala 121:28]
                skip @[BrainfuckProcessor.scala 118:24]
              skip @[Conditional.scala 39:67]
        skip @[BrainfuckProcessor.scala 98:22]
      else : @[BrainfuckProcessor.scala 125:18]
        node _T_104 = eq(UInt<1>("h00"), inst) @[Conditional.scala 37:30]
        node _T_105 = eq(UInt<6>("h023"), inst) @[Conditional.scala 37:30]
        node _T_106 = or(_T_104, _T_105) @[Conditional.scala 37:55]
        when _T_106 : @[Conditional.scala 40:58]
          halted <= UInt<1>("h01") @[BrainfuckProcessor.scala 129:18]
          errorCode <= UInt<1>("h00") @[BrainfuckProcessor.scala 130:21]
          skip @[Conditional.scala 40:58]
        else : @[Conditional.scala 39:67]
          node _T_110 = eq(UInt<6>("h03e"), inst) @[Conditional.scala 37:30]
          when _T_110 : @[Conditional.scala 39:67]
            node _T_112 = eq(stackPtr, UInt<16>("h0ffff")) @[BrainfuckProcessor.scala 133:26]
            when _T_112 : @[BrainfuckProcessor.scala 133:52]
              halted <= UInt<1>("h01") @[BrainfuckProcessor.scala 134:20]
              errorCode <= UInt<2>("h03") @[BrainfuckProcessor.scala 135:23]
              skip @[BrainfuckProcessor.scala 133:52]
            else : @[BrainfuckProcessor.scala 136:24]
              node _T_116 = add(pc, UInt<1>("h01")) @[BrainfuckProcessor.scala 137:23]
              node _T_117 = tail(_T_116, 1) @[BrainfuckProcessor.scala 137:23]
              pc <= _T_117 @[BrainfuckProcessor.scala 137:16]
              node _T_119 = add(pc, UInt<1>("h01")) @[BrainfuckProcessor.scala 138:37]
              node _T_120 = tail(_T_119, 1) @[BrainfuckProcessor.scala 138:37]
              read mport _T_121 = instMem[_T_120], clock @[BrainfuckProcessor.scala 138:33]
              inst <= _T_121 @[BrainfuckProcessor.scala 138:18]
              node _T_123 = add(stackPtr, UInt<1>("h01")) @[BrainfuckProcessor.scala 139:35]
              node _T_124 = tail(_T_123, 1) @[BrainfuckProcessor.scala 139:35]
              stackPtr <= _T_124 @[BrainfuckProcessor.scala 139:22]
              node _T_126 = add(stackPtr, UInt<1>("h01")) @[BrainfuckProcessor.scala 140:49]
              node _T_127 = tail(_T_126, 1) @[BrainfuckProcessor.scala 140:49]
              read mport _T_128 = stackMem[_T_127], clock @[BrainfuckProcessor.scala 140:39]
              stackData <= _T_128 @[BrainfuckProcessor.scala 140:23]
              skip @[BrainfuckProcessor.scala 136:24]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_130 = eq(UInt<6>("h03c"), inst) @[Conditional.scala 37:30]
            when _T_130 : @[Conditional.scala 39:67]
              node _T_132 = eq(stackPtr, UInt<1>("h00")) @[BrainfuckProcessor.scala 144:26]
              when _T_132 : @[BrainfuckProcessor.scala 144:35]
                halted <= UInt<1>("h01") @[BrainfuckProcessor.scala 145:20]
                errorCode <= UInt<3>("h04") @[BrainfuckProcessor.scala 146:23]
                skip @[BrainfuckProcessor.scala 144:35]
              else : @[BrainfuckProcessor.scala 147:24]
                node _T_136 = add(pc, UInt<1>("h01")) @[BrainfuckProcessor.scala 148:23]
                node _T_137 = tail(_T_136, 1) @[BrainfuckProcessor.scala 148:23]
                pc <= _T_137 @[BrainfuckProcessor.scala 148:16]
                node _T_139 = add(pc, UInt<1>("h01")) @[BrainfuckProcessor.scala 149:37]
                node _T_140 = tail(_T_139, 1) @[BrainfuckProcessor.scala 149:37]
                read mport _T_141 = instMem[_T_140], clock @[BrainfuckProcessor.scala 149:33]
                inst <= _T_141 @[BrainfuckProcessor.scala 149:18]
                node _T_143 = sub(stackPtr, UInt<1>("h01")) @[BrainfuckProcessor.scala 150:35]
                node _T_144 = asUInt(_T_143) @[BrainfuckProcessor.scala 150:35]
                node _T_145 = tail(_T_144, 1) @[BrainfuckProcessor.scala 150:35]
                stackPtr <= _T_145 @[BrainfuckProcessor.scala 150:22]
                node _T_147 = sub(stackPtr, UInt<1>("h01")) @[BrainfuckProcessor.scala 151:49]
                node _T_148 = asUInt(_T_147) @[BrainfuckProcessor.scala 151:49]
                node _T_149 = tail(_T_148, 1) @[BrainfuckProcessor.scala 151:49]
                read mport _T_150 = stackMem[_T_149], clock @[BrainfuckProcessor.scala 151:39]
                stackData <= _T_150 @[BrainfuckProcessor.scala 151:23]
                skip @[BrainfuckProcessor.scala 147:24]
              skip @[Conditional.scala 39:67]
            else : @[Conditional.scala 39:67]
              node _T_152 = eq(UInt<6>("h02b"), inst) @[Conditional.scala 37:30]
              when _T_152 : @[Conditional.scala 39:67]
                node _T_154 = add(stackData, UInt<1>("h01")) @[BrainfuckProcessor.scala 155:46]
                node _T_155 = tail(_T_154, 1) @[BrainfuckProcessor.scala 155:46]
                write mport _T_156 = stackMem[stackPtr], clock
                _T_156 <= _T_155
                node _T_158 = add(pc, UInt<1>("h01")) @[BrainfuckProcessor.scala 157:21]
                node _T_159 = tail(_T_158, 1) @[BrainfuckProcessor.scala 157:21]
                pc <= _T_159 @[BrainfuckProcessor.scala 157:14]
                node _T_161 = add(pc, UInt<1>("h01")) @[BrainfuckProcessor.scala 158:35]
                node _T_162 = tail(_T_161, 1) @[BrainfuckProcessor.scala 158:35]
                read mport _T_163 = instMem[_T_162], clock @[BrainfuckProcessor.scala 158:31]
                inst <= _T_163 @[BrainfuckProcessor.scala 158:16]
                node _T_165 = add(stackData, UInt<1>("h01")) @[BrainfuckProcessor.scala 159:35]
                node _T_166 = tail(_T_165, 1) @[BrainfuckProcessor.scala 159:35]
                stackData <= _T_166 @[BrainfuckProcessor.scala 159:21]
                skip @[Conditional.scala 39:67]
              else : @[Conditional.scala 39:67]
                node _T_168 = eq(UInt<6>("h02d"), inst) @[Conditional.scala 37:30]
                when _T_168 : @[Conditional.scala 39:67]
                  node _T_170 = sub(stackData, UInt<1>("h01")) @[BrainfuckProcessor.scala 162:46]
                  node _T_171 = asUInt(_T_170) @[BrainfuckProcessor.scala 162:46]
                  node _T_172 = tail(_T_171, 1) @[BrainfuckProcessor.scala 162:46]
                  write mport _T_173 = stackMem[stackPtr], clock
                  _T_173 <= _T_172
                  node _T_175 = add(pc, UInt<1>("h01")) @[BrainfuckProcessor.scala 164:21]
                  node _T_176 = tail(_T_175, 1) @[BrainfuckProcessor.scala 164:21]
                  pc <= _T_176 @[BrainfuckProcessor.scala 164:14]
                  node _T_178 = add(pc, UInt<1>("h01")) @[BrainfuckProcessor.scala 165:35]
                  node _T_179 = tail(_T_178, 1) @[BrainfuckProcessor.scala 165:35]
                  read mport _T_180 = instMem[_T_179], clock @[BrainfuckProcessor.scala 165:31]
                  inst <= _T_180 @[BrainfuckProcessor.scala 165:16]
                  node _T_182 = sub(stackData, UInt<1>("h01")) @[BrainfuckProcessor.scala 166:35]
                  node _T_183 = asUInt(_T_182) @[BrainfuckProcessor.scala 166:35]
                  node _T_184 = tail(_T_183, 1) @[BrainfuckProcessor.scala 166:35]
                  stackData <= _T_184 @[BrainfuckProcessor.scala 166:21]
                  skip @[Conditional.scala 39:67]
                else : @[Conditional.scala 39:67]
                  node _T_186 = eq(UInt<6>("h02e"), inst) @[Conditional.scala 37:30]
                  when _T_186 : @[Conditional.scala 39:67]
                    node _T_188 = eq(stdoutValid, UInt<1>("h00")) @[BrainfuckProcessor.scala 170:34]
                    node _T_189 = and(io.stdoutReady, _T_188) @[BrainfuckProcessor.scala 170:31]
                    when _T_189 : @[BrainfuckProcessor.scala 170:48]
                      stdoutData <= stackData @[BrainfuckProcessor.scala 173:24]
                      stdoutValid <= UInt<1>("h01") @[BrainfuckProcessor.scala 174:25]
                      node _T_192 = add(pc, UInt<1>("h01")) @[BrainfuckProcessor.scala 176:23]
                      node _T_193 = tail(_T_192, 1) @[BrainfuckProcessor.scala 176:23]
                      pc <= _T_193 @[BrainfuckProcessor.scala 176:16]
                      node _T_195 = add(pc, UInt<1>("h01")) @[BrainfuckProcessor.scala 177:37]
                      node _T_196 = tail(_T_195, 1) @[BrainfuckProcessor.scala 177:37]
                      read mport _T_197 = instMem[_T_196], clock @[BrainfuckProcessor.scala 177:33]
                      inst <= _T_197 @[BrainfuckProcessor.scala 177:18]
                      skip @[BrainfuckProcessor.scala 170:48]
                    skip @[Conditional.scala 39:67]
                  else : @[Conditional.scala 39:67]
                    node _T_199 = eq(UInt<6>("h02c"), inst) @[Conditional.scala 37:30]
                    when _T_199 : @[Conditional.scala 39:67]
                      node _T_201 = eq(stdinAck, UInt<1>("h00")) @[BrainfuckProcessor.scala 182:33]
                      node _T_202 = and(io.stdinValid, _T_201) @[BrainfuckProcessor.scala 182:30]
                      when _T_202 : @[BrainfuckProcessor.scala 182:44]
                        stdinAck <= UInt<1>("h01") @[BrainfuckProcessor.scala 183:22]
                        write mport _T_204 = stackMem[stackPtr], clock
                        _T_204 <= io.stdinData
                        node _T_206 = add(pc, UInt<1>("h01")) @[BrainfuckProcessor.scala 186:23]
                        node _T_207 = tail(_T_206, 1) @[BrainfuckProcessor.scala 186:23]
                        pc <= _T_207 @[BrainfuckProcessor.scala 186:16]
                        node _T_209 = add(pc, UInt<1>("h01")) @[BrainfuckProcessor.scala 187:37]
                        node _T_210 = tail(_T_209, 1) @[BrainfuckProcessor.scala 187:37]
                        read mport _T_211 = instMem[_T_210], clock @[BrainfuckProcessor.scala 187:33]
                        inst <= _T_211 @[BrainfuckProcessor.scala 187:18]
                        stackData <= io.stdinData @[BrainfuckProcessor.scala 188:23]
                        skip @[BrainfuckProcessor.scala 182:44]
                      skip @[Conditional.scala 39:67]
                    else : @[Conditional.scala 39:67]
                      node _T_213 = eq(UInt<7>("h05b"), inst) @[Conditional.scala 37:30]
                      when _T_213 : @[Conditional.scala 39:67]
                        node _T_215 = eq(stackData, UInt<1>("h00")) @[BrainfuckProcessor.scala 192:26]
                        when _T_215 : @[BrainfuckProcessor.scala 192:35]
                          branchJump <= UInt<1>("h01") @[BrainfuckProcessor.scala 194:24]
                          branchJumpNest <= UInt<1>("h00") @[BrainfuckProcessor.scala 195:28]
                          node _T_219 = add(pc, UInt<1>("h01")) @[BrainfuckProcessor.scala 196:23]
                          node _T_220 = tail(_T_219, 1) @[BrainfuckProcessor.scala 196:23]
                          pc <= _T_220 @[BrainfuckProcessor.scala 196:16]
                          node _T_222 = add(pc, UInt<1>("h01")) @[BrainfuckProcessor.scala 197:37]
                          node _T_223 = tail(_T_222, 1) @[BrainfuckProcessor.scala 197:37]
                          read mport _T_224 = instMem[_T_223], clock @[BrainfuckProcessor.scala 197:33]
                          inst <= _T_224 @[BrainfuckProcessor.scala 197:18]
                          skip @[BrainfuckProcessor.scala 192:35]
                        else : @[BrainfuckProcessor.scala 198:24]
                          write mport _T_225 = branchStackMem[branchStackPtr], clock
                          _T_225 <= pc
                          node _T_227 = add(pc, UInt<1>("h01")) @[BrainfuckProcessor.scala 201:23]
                          node _T_228 = tail(_T_227, 1) @[BrainfuckProcessor.scala 201:23]
                          pc <= _T_228 @[BrainfuckProcessor.scala 201:16]
                          node _T_230 = add(pc, UInt<1>("h01")) @[BrainfuckProcessor.scala 202:37]
                          node _T_231 = tail(_T_230, 1) @[BrainfuckProcessor.scala 202:37]
                          read mport _T_232 = instMem[_T_231], clock @[BrainfuckProcessor.scala 202:33]
                          inst <= _T_232 @[BrainfuckProcessor.scala 202:18]
                          node _T_234 = add(branchStackPtr, UInt<1>("h01")) @[BrainfuckProcessor.scala 203:47]
                          node _T_235 = tail(_T_234, 1) @[BrainfuckProcessor.scala 203:47]
                          branchStackPtr <= _T_235 @[BrainfuckProcessor.scala 203:28]
                          branchStackData <= pc @[BrainfuckProcessor.scala 204:29]
                          skip @[BrainfuckProcessor.scala 198:24]
                        skip @[Conditional.scala 39:67]
                      else : @[Conditional.scala 39:67]
                        node _T_237 = eq(UInt<7>("h05d"), inst) @[Conditional.scala 37:30]
                        when _T_237 : @[Conditional.scala 39:67]
                          pc <= branchStackData @[BrainfuckProcessor.scala 209:14]
                          inst <= UInt<7>("h05b") @[BrainfuckProcessor.scala 210:16]
                          node _T_240 = gt(branchStackPtr, UInt<1>("h01")) @[BrainfuckProcessor.scala 212:31]
                          when _T_240 : @[BrainfuckProcessor.scala 212:38]
                            node _T_242 = sub(branchStackPtr, UInt<1>("h01")) @[BrainfuckProcessor.scala 213:47]
                            node _T_243 = asUInt(_T_242) @[BrainfuckProcessor.scala 213:47]
                            node _T_244 = tail(_T_243, 1) @[BrainfuckProcessor.scala 213:47]
                            branchStackPtr <= _T_244 @[BrainfuckProcessor.scala 213:28]
                            node _T_246 = sub(branchStackPtr, UInt<2>("h02")) @[BrainfuckProcessor.scala 214:67]
                            node _T_247 = asUInt(_T_246) @[BrainfuckProcessor.scala 214:67]
                            node _T_248 = tail(_T_247, 1) @[BrainfuckProcessor.scala 214:67]
                            read mport _T_249 = branchStackMem[_T_248], clock @[BrainfuckProcessor.scala 214:51]
                            branchStackData <= _T_249 @[BrainfuckProcessor.scala 214:29]
                            skip @[BrainfuckProcessor.scala 212:38]
                          else : @[BrainfuckProcessor.scala 215:23]
                            branchStackPtr <= UInt<1>("h00") @[BrainfuckProcessor.scala 217:28]
                            branchStackData <= UInt<1>("h00") @[BrainfuckProcessor.scala 218:29]
                            skip @[BrainfuckProcessor.scala 215:23]
                          skip @[Conditional.scala 39:67]
                        else : @[Conditional.scala 39:67]
                          node _T_257 = eq(UInt<4>("h0d"), inst) @[Conditional.scala 37:30]
                          node _T_258 = eq(UInt<4>("h0a"), inst) @[Conditional.scala 37:30]
                          node _T_259 = eq(UInt<6>("h020"), inst) @[Conditional.scala 37:30]
                          node _T_260 = eq(UInt<7>("h058"), inst) @[Conditional.scala 37:30]
                          node _T_261 = eq(UInt<7>("h078"), inst) @[Conditional.scala 37:30]
                          node _T_262 = or(_T_257, _T_258) @[Conditional.scala 37:55]
                          node _T_263 = or(_T_262, _T_259) @[Conditional.scala 37:55]
                          node _T_264 = or(_T_263, _T_260) @[Conditional.scala 37:55]
                          node _T_265 = or(_T_264, _T_261) @[Conditional.scala 37:55]
                          when _T_265 : @[Conditional.scala 39:67]
                            node _T_267 = add(pc, UInt<1>("h01")) @[BrainfuckProcessor.scala 223:21]
                            node _T_268 = tail(_T_267, 1) @[BrainfuckProcessor.scala 223:21]
                            pc <= _T_268 @[BrainfuckProcessor.scala 223:14]
                            node _T_270 = add(pc, UInt<1>("h01")) @[BrainfuckProcessor.scala 224:35]
                            node _T_271 = tail(_T_270, 1) @[BrainfuckProcessor.scala 224:35]
                            read mport _T_272 = instMem[_T_271], clock @[BrainfuckProcessor.scala 224:31]
                            inst <= _T_272 @[BrainfuckProcessor.scala 224:16]
                            skip @[Conditional.scala 39:67]
        skip @[BrainfuckProcessor.scala 125:18]
      skip @[BrainfuckProcessor.scala 97:17]
    else : @[BrainfuckProcessor.scala 228:16]
      branchJump <= UInt<1>("h00") @[BrainfuckProcessor.scala 230:16]
      branchJumpNest <= UInt<1>("h00") @[BrainfuckProcessor.scala 231:20]
      pc <= UInt<1>("h00") @[BrainfuckProcessor.scala 232:8]
      read mport _T_277 = instMem[UInt<1>("h00")], clock @[BrainfuckProcessor.scala 233:25]
      inst <= _T_277 @[BrainfuckProcessor.scala 233:10]
      stackPtr <= UInt<1>("h00") @[BrainfuckProcessor.scala 234:14]
      read mport _T_280 = stackMem[UInt<1>("h00")], clock @[BrainfuckProcessor.scala 235:31]
      stackData <= _T_280 @[BrainfuckProcessor.scala 235:15]
      branchStackPtr <= UInt<1>("h00") @[BrainfuckProcessor.scala 236:20]
      branchStackData <= UInt<1>("h00") @[BrainfuckProcessor.scala 237:21]
      skip @[BrainfuckProcessor.scala 228:16]
    reg run : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[BrainfuckProcessor.scala 240:20]
    reg run2 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[BrainfuckProcessor.scala 241:21]
    run <= io.run @[BrainfuckProcessor.scala 242:7]
    run2 <= run @[BrainfuckProcessor.scala 243:8]
    when halted : @[BrainfuckProcessor.scala 244:16]
      node _T_288 = eq(run2, UInt<1>("h00")) @[BrainfuckProcessor.scala 245:11]
      node _T_289 = and(_T_288, run) @[BrainfuckProcessor.scala 245:17]
      node _T_291 = eq(io.program, UInt<1>("h00")) @[BrainfuckProcessor.scala 245:28]
      node _T_292 = and(_T_289, _T_291) @[BrainfuckProcessor.scala 245:25]
      when _T_292 : @[BrainfuckProcessor.scala 245:41]
        errorCode <= UInt<1>("h00") @[BrainfuckProcessor.scala 246:17]
        halted <= UInt<1>("h00") @[BrainfuckProcessor.scala 247:14]
        skip @[BrainfuckProcessor.scala 245:41]
      skip @[BrainfuckProcessor.scala 244:16]
    node _T_296 = eq(io.program, UInt<1>("h00")) @[BrainfuckProcessor.scala 251:8]
    node _T_298 = eq(halted, UInt<1>("h00")) @[BrainfuckProcessor.scala 251:23]
    node _T_299 = or(_T_296, _T_298) @[BrainfuckProcessor.scala 251:20]
    when _T_299 : @[BrainfuckProcessor.scala 251:32]
      programAddr <= UInt<1>("h00") @[BrainfuckProcessor.scala 252:17]
      programReady <= UInt<1>("h00") @[BrainfuckProcessor.scala 253:18]
      skip @[BrainfuckProcessor.scala 251:32]
    else : @[BrainfuckProcessor.scala 254:16]
      programReady <= UInt<1>("h01") @[BrainfuckProcessor.scala 256:18]
      when io.programValid : @[BrainfuckProcessor.scala 258:27]
        programAck <= UInt<1>("h01") @[BrainfuckProcessor.scala 259:18]
        write mport _T_304 = instMem[programAddr], clock
        _T_304 <= io.programData
        node _T_306 = add(programAddr, UInt<1>("h01")) @[BrainfuckProcessor.scala 261:34]
        node _T_307 = tail(_T_306, 1) @[BrainfuckProcessor.scala 261:34]
        programAddr <= _T_307 @[BrainfuckProcessor.scala 261:19]
        skip @[BrainfuckProcessor.scala 258:27]
      else : @[BrainfuckProcessor.scala 262:18]
        programAck <= UInt<1>("h00") @[BrainfuckProcessor.scala 263:18]
        skip @[BrainfuckProcessor.scala 262:18]
      skip @[BrainfuckProcessor.scala 254:16]
    
  module UntiChatter : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip din : UInt<1>, dout : UInt<1>}
    
    reg counter : UInt<21>, clock with : (reset => (reset, UInt<1>("h00"))) @[UntiChatter.scala 19:24]
    reg trigger : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[UntiChatter.scala 20:24]
    node _T_9 = lt(counter, UInt<19>("h07a120")) @[UntiChatter.scala 21:16]
    when _T_9 : @[UntiChatter.scala 21:34]
      node _T_11 = add(counter, UInt<1>("h01")) @[UntiChatter.scala 22:24]
      node _T_12 = tail(_T_11, 1) @[UntiChatter.scala 22:24]
      counter <= _T_12 @[UntiChatter.scala 22:13]
      trigger <= UInt<1>("h00") @[UntiChatter.scala 23:13]
      skip @[UntiChatter.scala 21:34]
    else : @[UntiChatter.scala 24:16]
      counter <= UInt<1>("h00") @[UntiChatter.scala 25:13]
      trigger <= UInt<1>("h01") @[UntiChatter.scala 26:13]
      skip @[UntiChatter.scala 24:16]
    reg dout : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[UntiChatter.scala 29:21]
    io.dout <= dout @[UntiChatter.scala 30:11]
    reg captureData : UInt<8>, clock with : (reset => (reset, UInt<1>("h00"))) @[UntiChatter.scala 31:28]
    when trigger : @[UntiChatter.scala 32:18]
      node _T_20 = shl(captureData, 1) @[UntiChatter.scala 33:33]
      node _T_23 = mux(io.din, UInt<1>("h01"), UInt<1>("h00")) @[UntiChatter.scala 33:51]
      node _T_24 = add(_T_20, _T_23) @[UntiChatter.scala 33:46]
      node _T_25 = tail(_T_24, 1) @[UntiChatter.scala 33:46]
      captureData <= _T_25 @[UntiChatter.scala 33:17]
      node _T_26 = not(captureData) @[UntiChatter.scala 34:43]
      node _T_28 = eq(_T_26, UInt<1>("h00")) @[UntiChatter.scala 34:43]
      dout <= _T_28 @[UntiChatter.scala 34:10]
      skip @[UntiChatter.scala 32:18]
    
  module UntiChatter_1 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip din : UInt<1>, dout : UInt<1>}
    
    reg counter : UInt<21>, clock with : (reset => (reset, UInt<1>("h00"))) @[UntiChatter.scala 19:24]
    reg trigger : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[UntiChatter.scala 20:24]
    node _T_9 = lt(counter, UInt<19>("h07a120")) @[UntiChatter.scala 21:16]
    when _T_9 : @[UntiChatter.scala 21:34]
      node _T_11 = add(counter, UInt<1>("h01")) @[UntiChatter.scala 22:24]
      node _T_12 = tail(_T_11, 1) @[UntiChatter.scala 22:24]
      counter <= _T_12 @[UntiChatter.scala 22:13]
      trigger <= UInt<1>("h00") @[UntiChatter.scala 23:13]
      skip @[UntiChatter.scala 21:34]
    else : @[UntiChatter.scala 24:16]
      counter <= UInt<1>("h00") @[UntiChatter.scala 25:13]
      trigger <= UInt<1>("h01") @[UntiChatter.scala 26:13]
      skip @[UntiChatter.scala 24:16]
    reg dout : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[UntiChatter.scala 29:21]
    io.dout <= dout @[UntiChatter.scala 30:11]
    reg captureData : UInt<8>, clock with : (reset => (reset, UInt<1>("h00"))) @[UntiChatter.scala 31:28]
    when trigger : @[UntiChatter.scala 32:18]
      node _T_20 = shl(captureData, 1) @[UntiChatter.scala 33:33]
      node _T_23 = mux(io.din, UInt<1>("h01"), UInt<1>("h00")) @[UntiChatter.scala 33:51]
      node _T_24 = add(_T_20, _T_23) @[UntiChatter.scala 33:46]
      node _T_25 = tail(_T_24, 1) @[UntiChatter.scala 33:46]
      captureData <= _T_25 @[UntiChatter.scala 33:17]
      node _T_26 = not(captureData) @[UntiChatter.scala 34:43]
      node _T_28 = eq(_T_26, UInt<1>("h00")) @[UntiChatter.scala 34:43]
      dout <= _T_28 @[UntiChatter.scala 34:10]
      skip @[UntiChatter.scala 32:18]
    
  module Fifo : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip inData : UInt<8>, flip inValid : UInt<1>, inReady : UInt<1>, inAck : UInt<1>, outData : UInt<8>, outValid : UInt<1>, flip outReady : UInt<1>, flip outAck : UInt<1>, empty : UInt<1>, full : UInt<1>, inPtr : UInt<4>, outPtr : UInt<4>}
    
    reg inReady : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Fifo.scala 26:24]
    reg inAck : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Fifo.scala 27:22]
    reg outData : UInt<8>, clock with : (reset => (reset, UInt<1>("h00"))) @[Fifo.scala 28:24]
    reg outValid : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Fifo.scala 29:25]
    io.inReady <= inReady @[Fifo.scala 30:14]
    io.inAck <= inAck @[Fifo.scala 31:12]
    io.outData <= outData @[Fifo.scala 32:14]
    io.outValid <= outValid @[Fifo.scala 33:15]
    cmem mem : UInt<8>[16] @[Fifo.scala 36:16]
    reg inPtr : UInt<4>, clock with : (reset => (reset, UInt<1>("h01"))) @[Fifo.scala 38:22]
    reg outPtr : UInt<4>, clock with : (reset => (reset, UInt<1>("h00"))) @[Fifo.scala 39:23]
    io.inPtr <= inPtr @[Fifo.scala 40:12]
    io.outPtr <= outPtr @[Fifo.scala 41:13]
    node _T_28 = leq(outPtr, inPtr) @[Fifo.scala 47:12]
    node _T_29 = sub(inPtr, outPtr) @[Fifo.scala 48:11]
    node _T_30 = asUInt(_T_29) @[Fifo.scala 48:11]
    node _T_31 = tail(_T_30, 1) @[Fifo.scala 48:11]
    node _T_33 = sub(_T_31, UInt<1>("h01")) @[Fifo.scala 48:20]
    node _T_34 = asUInt(_T_33) @[Fifo.scala 48:20]
    node _T_35 = tail(_T_34, 1) @[Fifo.scala 48:20]
    node _T_37 = sub(UInt<5>("h010"), outPtr) @[Fifo.scala 49:14]
    node _T_38 = asUInt(_T_37) @[Fifo.scala 49:14]
    node _T_39 = tail(_T_38, 1) @[Fifo.scala 49:14]
    node _T_41 = sub(_T_39, UInt<1>("h01")) @[Fifo.scala 49:23]
    node _T_42 = asUInt(_T_41) @[Fifo.scala 49:23]
    node _T_43 = tail(_T_42, 1) @[Fifo.scala 49:23]
    node _T_44 = add(_T_43, inPtr) @[Fifo.scala 49:30]
    node _T_45 = tail(_T_44, 1) @[Fifo.scala 49:30]
    node count = mux(_T_28, _T_35, _T_45) @[Fifo.scala 46:18]
    node empty = eq(count, UInt<1>("h00")) @[Fifo.scala 51:21]
    node _T_49 = sub(UInt<5>("h010"), UInt<2>("h03")) @[Fifo.scala 52:33]
    node _T_50 = asUInt(_T_49) @[Fifo.scala 52:33]
    node _T_51 = tail(_T_50, 1) @[Fifo.scala 52:33]
    node full = eq(count, _T_51) @[Fifo.scala 52:20]
    node _T_54 = sub(UInt<5>("h010"), UInt<1>("h01")) @[Fifo.scala 53:39]
    node _T_55 = asUInt(_T_54) @[Fifo.scala 53:39]
    node _T_56 = tail(_T_55, 1) @[Fifo.scala 53:39]
    node _T_57 = lt(inPtr, _T_56) @[Fifo.scala 53:29]
    node _T_59 = add(inPtr, UInt<1>("h01")) @[Fifo.scala 53:52]
    node _T_60 = tail(_T_59, 1) @[Fifo.scala 53:52]
    node inPtrNext = mux(_T_57, _T_60, UInt<1>("h00")) @[Fifo.scala 53:22]
    node _T_64 = sub(UInt<5>("h010"), UInt<1>("h01")) @[Fifo.scala 54:41]
    node _T_65 = asUInt(_T_64) @[Fifo.scala 54:41]
    node _T_66 = tail(_T_65, 1) @[Fifo.scala 54:41]
    node _T_67 = lt(outPtr, _T_66) @[Fifo.scala 54:31]
    node _T_69 = add(outPtr, UInt<1>("h01")) @[Fifo.scala 54:55]
    node _T_70 = tail(_T_69, 1) @[Fifo.scala 54:55]
    node outPtrNext = mux(_T_67, _T_70, UInt<1>("h00")) @[Fifo.scala 54:23]
    io.empty <= empty @[Fifo.scala 55:12]
    io.full <= full @[Fifo.scala 56:11]
    node _T_73 = eq(full, UInt<1>("h00")) @[Fifo.scala 58:8]
    when _T_73 : @[Fifo.scala 58:15]
      when io.inValid : @[Fifo.scala 59:22]
        write mport _T_74 = mem[inPtr], clock
        _T_74 <= io.inData
        inPtr <= inPtrNext @[Fifo.scala 61:13]
        inReady <= UInt<1>("h01") @[Fifo.scala 62:15]
        inAck <= UInt<1>("h01") @[Fifo.scala 63:13]
        node _T_77 = bits(reset, 0, 0) @[Fifo.scala 64:13]
        node _T_79 = eq(_T_77, UInt<1>("h00")) @[Fifo.scala 64:13]
        when _T_79 : @[Fifo.scala 64:13]
          printf(clock, UInt<1>(1), "[Fifo] [euqueue] data:%d inPtr:%d count:%d\n", io.inData, inPtr, count) @[Fifo.scala 64:13]
          skip @[Fifo.scala 64:13]
        skip @[Fifo.scala 59:22]
      else : @[Fifo.scala 65:18]
        node _T_80 = bits(reset, 0, 0) @[Fifo.scala 66:13]
        node _T_82 = eq(_T_80, UInt<1>("h00")) @[Fifo.scala 66:13]
        when _T_82 : @[Fifo.scala 66:13]
          printf(clock, UInt<1>(1), "[Fifo] [euqueue] nack count:%d\n", count) @[Fifo.scala 66:13]
          skip @[Fifo.scala 66:13]
        inReady <= UInt<1>("h01") @[Fifo.scala 67:15]
        inAck <= UInt<1>("h00") @[Fifo.scala 68:13]
        skip @[Fifo.scala 65:18]
      skip @[Fifo.scala 58:15]
    else : @[Fifo.scala 70:16]
      inReady <= UInt<1>("h00") @[Fifo.scala 71:13]
      inAck <= UInt<1>("h00") @[Fifo.scala 72:11]
      skip @[Fifo.scala 70:16]
    node _T_88 = eq(empty, UInt<1>("h00")) @[Fifo.scala 75:8]
    when _T_88 : @[Fifo.scala 75:16]
      when io.outReady : @[Fifo.scala 77:23]
        node _T_90 = eq(outValid, UInt<1>("h00")) @[Fifo.scala 80:24]
        node _T_91 = or(io.outAck, _T_90) @[Fifo.scala 80:22]
        when _T_91 : @[Fifo.scala 80:35]
          node _T_92 = bits(reset, 0, 0) @[Fifo.scala 81:15]
          node _T_94 = eq(_T_92, UInt<1>("h00")) @[Fifo.scala 81:15]
          when _T_94 : @[Fifo.scala 81:15]
            printf(clock, UInt<1>(1), "[Fifo] [dequeue] data:%d outPtr:%d count:%d\n", outData, outPtr, count) @[Fifo.scala 81:15]
            skip @[Fifo.scala 81:15]
          read mport _T_95 = mem[outPtrNext], clock @[Fifo.scala 82:28]
          outData <= _T_95 @[Fifo.scala 82:17]
          outPtr <= outPtrNext @[Fifo.scala 83:16]
          outValid <= UInt<1>("h01") @[Fifo.scala 84:18]
          skip @[Fifo.scala 80:35]
        else : @[Fifo.scala 85:20]
          node _T_97 = bits(reset, 0, 0) @[Fifo.scala 88:15]
          node _T_99 = eq(_T_97, UInt<1>("h00")) @[Fifo.scala 88:15]
          when _T_99 : @[Fifo.scala 88:15]
            printf(clock, UInt<1>(1), "[Fifo] [dequeue] keep count:%d\n", count) @[Fifo.scala 88:15]
            skip @[Fifo.scala 88:15]
          skip @[Fifo.scala 85:20]
        skip @[Fifo.scala 77:23]
      else : @[Fifo.scala 90:18]
        outData <= UInt<1>("h00") @[Fifo.scala 92:15]
        outValid <= UInt<1>("h00") @[Fifo.scala 93:16]
        skip @[Fifo.scala 90:18]
      skip @[Fifo.scala 75:16]
    else : @[Fifo.scala 95:16]
      when io.outAck : @[Fifo.scala 97:21]
        node _T_102 = bits(reset, 0, 0) @[Fifo.scala 98:13]
        node _T_104 = eq(_T_102, UInt<1>("h00")) @[Fifo.scala 98:13]
        when _T_104 : @[Fifo.scala 98:13]
          printf(clock, UInt<1>(1), "[Fifo] [dequeue] negate(empty) count:%d\n", count) @[Fifo.scala 98:13]
          skip @[Fifo.scala 98:13]
        outData <= UInt<1>("h00") @[Fifo.scala 99:15]
        outValid <= UInt<1>("h00") @[Fifo.scala 100:16]
        skip @[Fifo.scala 97:21]
      skip @[Fifo.scala 95:16]
    
  module Fifo_1 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip inData : UInt<8>, flip inValid : UInt<1>, inReady : UInt<1>, inAck : UInt<1>, outData : UInt<8>, outValid : UInt<1>, flip outReady : UInt<1>, flip outAck : UInt<1>, empty : UInt<1>, full : UInt<1>, inPtr : UInt<4>, outPtr : UInt<4>}
    
    reg inReady : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Fifo.scala 26:24]
    reg inAck : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Fifo.scala 27:22]
    reg outData : UInt<8>, clock with : (reset => (reset, UInt<1>("h00"))) @[Fifo.scala 28:24]
    reg outValid : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Fifo.scala 29:25]
    io.inReady <= inReady @[Fifo.scala 30:14]
    io.inAck <= inAck @[Fifo.scala 31:12]
    io.outData <= outData @[Fifo.scala 32:14]
    io.outValid <= outValid @[Fifo.scala 33:15]
    cmem mem : UInt<8>[16] @[Fifo.scala 36:16]
    reg inPtr : UInt<4>, clock with : (reset => (reset, UInt<1>("h01"))) @[Fifo.scala 38:22]
    reg outPtr : UInt<4>, clock with : (reset => (reset, UInt<1>("h00"))) @[Fifo.scala 39:23]
    io.inPtr <= inPtr @[Fifo.scala 40:12]
    io.outPtr <= outPtr @[Fifo.scala 41:13]
    node _T_28 = leq(outPtr, inPtr) @[Fifo.scala 47:12]
    node _T_29 = sub(inPtr, outPtr) @[Fifo.scala 48:11]
    node _T_30 = asUInt(_T_29) @[Fifo.scala 48:11]
    node _T_31 = tail(_T_30, 1) @[Fifo.scala 48:11]
    node _T_33 = sub(_T_31, UInt<1>("h01")) @[Fifo.scala 48:20]
    node _T_34 = asUInt(_T_33) @[Fifo.scala 48:20]
    node _T_35 = tail(_T_34, 1) @[Fifo.scala 48:20]
    node _T_37 = sub(UInt<5>("h010"), outPtr) @[Fifo.scala 49:14]
    node _T_38 = asUInt(_T_37) @[Fifo.scala 49:14]
    node _T_39 = tail(_T_38, 1) @[Fifo.scala 49:14]
    node _T_41 = sub(_T_39, UInt<1>("h01")) @[Fifo.scala 49:23]
    node _T_42 = asUInt(_T_41) @[Fifo.scala 49:23]
    node _T_43 = tail(_T_42, 1) @[Fifo.scala 49:23]
    node _T_44 = add(_T_43, inPtr) @[Fifo.scala 49:30]
    node _T_45 = tail(_T_44, 1) @[Fifo.scala 49:30]
    node count = mux(_T_28, _T_35, _T_45) @[Fifo.scala 46:18]
    node empty = eq(count, UInt<1>("h00")) @[Fifo.scala 51:21]
    node _T_49 = sub(UInt<5>("h010"), UInt<2>("h03")) @[Fifo.scala 52:33]
    node _T_50 = asUInt(_T_49) @[Fifo.scala 52:33]
    node _T_51 = tail(_T_50, 1) @[Fifo.scala 52:33]
    node full = eq(count, _T_51) @[Fifo.scala 52:20]
    node _T_54 = sub(UInt<5>("h010"), UInt<1>("h01")) @[Fifo.scala 53:39]
    node _T_55 = asUInt(_T_54) @[Fifo.scala 53:39]
    node _T_56 = tail(_T_55, 1) @[Fifo.scala 53:39]
    node _T_57 = lt(inPtr, _T_56) @[Fifo.scala 53:29]
    node _T_59 = add(inPtr, UInt<1>("h01")) @[Fifo.scala 53:52]
    node _T_60 = tail(_T_59, 1) @[Fifo.scala 53:52]
    node inPtrNext = mux(_T_57, _T_60, UInt<1>("h00")) @[Fifo.scala 53:22]
    node _T_64 = sub(UInt<5>("h010"), UInt<1>("h01")) @[Fifo.scala 54:41]
    node _T_65 = asUInt(_T_64) @[Fifo.scala 54:41]
    node _T_66 = tail(_T_65, 1) @[Fifo.scala 54:41]
    node _T_67 = lt(outPtr, _T_66) @[Fifo.scala 54:31]
    node _T_69 = add(outPtr, UInt<1>("h01")) @[Fifo.scala 54:55]
    node _T_70 = tail(_T_69, 1) @[Fifo.scala 54:55]
    node outPtrNext = mux(_T_67, _T_70, UInt<1>("h00")) @[Fifo.scala 54:23]
    io.empty <= empty @[Fifo.scala 55:12]
    io.full <= full @[Fifo.scala 56:11]
    node _T_73 = eq(full, UInt<1>("h00")) @[Fifo.scala 58:8]
    when _T_73 : @[Fifo.scala 58:15]
      when io.inValid : @[Fifo.scala 59:22]
        write mport _T_74 = mem[inPtr], clock
        _T_74 <= io.inData
        inPtr <= inPtrNext @[Fifo.scala 61:13]
        inReady <= UInt<1>("h01") @[Fifo.scala 62:15]
        inAck <= UInt<1>("h01") @[Fifo.scala 63:13]
        node _T_77 = bits(reset, 0, 0) @[Fifo.scala 64:13]
        node _T_79 = eq(_T_77, UInt<1>("h00")) @[Fifo.scala 64:13]
        when _T_79 : @[Fifo.scala 64:13]
          printf(clock, UInt<1>(1), "[Fifo] [euqueue] data:%d inPtr:%d count:%d\n", io.inData, inPtr, count) @[Fifo.scala 64:13]
          skip @[Fifo.scala 64:13]
        skip @[Fifo.scala 59:22]
      else : @[Fifo.scala 65:18]
        node _T_80 = bits(reset, 0, 0) @[Fifo.scala 66:13]
        node _T_82 = eq(_T_80, UInt<1>("h00")) @[Fifo.scala 66:13]
        when _T_82 : @[Fifo.scala 66:13]
          printf(clock, UInt<1>(1), "[Fifo] [euqueue] nack count:%d\n", count) @[Fifo.scala 66:13]
          skip @[Fifo.scala 66:13]
        inReady <= UInt<1>("h01") @[Fifo.scala 67:15]
        inAck <= UInt<1>("h00") @[Fifo.scala 68:13]
        skip @[Fifo.scala 65:18]
      skip @[Fifo.scala 58:15]
    else : @[Fifo.scala 70:16]
      inReady <= UInt<1>("h00") @[Fifo.scala 71:13]
      inAck <= UInt<1>("h00") @[Fifo.scala 72:11]
      skip @[Fifo.scala 70:16]
    node _T_88 = eq(empty, UInt<1>("h00")) @[Fifo.scala 75:8]
    when _T_88 : @[Fifo.scala 75:16]
      when io.outReady : @[Fifo.scala 77:23]
        node _T_90 = eq(outValid, UInt<1>("h00")) @[Fifo.scala 80:24]
        node _T_91 = or(io.outAck, _T_90) @[Fifo.scala 80:22]
        when _T_91 : @[Fifo.scala 80:35]
          node _T_92 = bits(reset, 0, 0) @[Fifo.scala 81:15]
          node _T_94 = eq(_T_92, UInt<1>("h00")) @[Fifo.scala 81:15]
          when _T_94 : @[Fifo.scala 81:15]
            printf(clock, UInt<1>(1), "[Fifo] [dequeue] data:%d outPtr:%d count:%d\n", outData, outPtr, count) @[Fifo.scala 81:15]
            skip @[Fifo.scala 81:15]
          read mport _T_95 = mem[outPtrNext], clock @[Fifo.scala 82:28]
          outData <= _T_95 @[Fifo.scala 82:17]
          outPtr <= outPtrNext @[Fifo.scala 83:16]
          outValid <= UInt<1>("h01") @[Fifo.scala 84:18]
          skip @[Fifo.scala 80:35]
        else : @[Fifo.scala 85:20]
          node _T_97 = bits(reset, 0, 0) @[Fifo.scala 88:15]
          node _T_99 = eq(_T_97, UInt<1>("h00")) @[Fifo.scala 88:15]
          when _T_99 : @[Fifo.scala 88:15]
            printf(clock, UInt<1>(1), "[Fifo] [dequeue] keep count:%d\n", count) @[Fifo.scala 88:15]
            skip @[Fifo.scala 88:15]
          skip @[Fifo.scala 85:20]
        skip @[Fifo.scala 77:23]
      else : @[Fifo.scala 90:18]
        outData <= UInt<1>("h00") @[Fifo.scala 92:15]
        outValid <= UInt<1>("h00") @[Fifo.scala 93:16]
        skip @[Fifo.scala 90:18]
      skip @[Fifo.scala 75:16]
    else : @[Fifo.scala 95:16]
      when io.outAck : @[Fifo.scala 97:21]
        node _T_102 = bits(reset, 0, 0) @[Fifo.scala 98:13]
        node _T_104 = eq(_T_102, UInt<1>("h00")) @[Fifo.scala 98:13]
        when _T_104 : @[Fifo.scala 98:13]
          printf(clock, UInt<1>(1), "[Fifo] [dequeue] negate(empty) count:%d\n", count) @[Fifo.scala 98:13]
          skip @[Fifo.scala 98:13]
        outData <= UInt<1>("h00") @[Fifo.scala 99:15]
        outValid <= UInt<1>("h00") @[Fifo.scala 100:16]
        skip @[Fifo.scala 97:21]
      skip @[Fifo.scala 95:16]
    
  module DebugAccessPort : 
    input clock : Clock
    input reset : UInt<1>
    output io : {uartTx : UInt<1>, flip uartRx : UInt<1>, flip switches : UInt<1>[4], leds : UInt<1>[4], triLed0 : UInt<3>, triLed1 : UInt<3>, triLed2 : UInt<3>, triLed3 : UInt<3>}
    
    inst uart of UartTxRx @[DebugAccessPort.scala 37:20]
    uart.clock <= clock
    uart.reset <= reset
    inst bf of BrainfuckProcessor @[DebugAccessPort.scala 38:18]
    bf.clock <= clock
    bf.reset <= reset
    inst chatterProgram of UntiChatter @[DebugAccessPort.scala 42:30]
    chatterProgram.clock <= clock
    chatterProgram.reset <= reset
    inst chatterRun of UntiChatter_1 @[DebugAccessPort.scala 43:26]
    chatterRun.clock <= clock
    chatterRun.reset <= reset
    wire program : UInt<1> @[DebugAccessPort.scala 44:21]
    wire run : UInt<1> @[DebugAccessPort.scala 45:17]
    chatterProgram.io.din <= io.switches[0] @[DebugAccessPort.scala 46:18]
    chatterRun.io.din <= io.switches[1] @[DebugAccessPort.scala 47:18]
    program <= chatterProgram.io.dout @[DebugAccessPort.scala 48:11]
    run <= chatterProgram.io.dout @[DebugAccessPort.scala 49:7]
    bf.io.run <= run @[DebugAccessPort.scala 50:13]
    bf.io.program <= run @[DebugAccessPort.scala 51:17]
    reg statusInst : UInt<8>, clock with : (reset => (reset, UInt<1>("h00"))) @[DebugAccessPort.scala 55:27]
    statusInst <= bf.io.inst @[DebugAccessPort.scala 56:14]
    io.leds[0] <= program @[DebugAccessPort.scala 57:14]
    io.leds[1] <= run @[DebugAccessPort.scala 58:14]
    io.leds[2] <= bf.io.stdoutValid @[DebugAccessPort.scala 59:14]
    io.leds[3] <= bf.io.halted @[DebugAccessPort.scala 60:14]
    node _T_30 = bits(statusInst, 2, 0) @[DebugAccessPort.scala 61:27]
    io.triLed0 <= _T_30 @[DebugAccessPort.scala 61:14]
    node _T_31 = bits(statusInst, 5, 3) @[DebugAccessPort.scala 62:27]
    io.triLed1 <= _T_31 @[DebugAccessPort.scala 62:14]
    node _T_32 = bits(statusInst, 7, 6) @[DebugAccessPort.scala 63:27]
    io.triLed2 <= _T_32 @[DebugAccessPort.scala 63:14]
    io.triLed3 <= bf.io.errorCode @[DebugAccessPort.scala 64:14]
    io.uartTx <= uart.io.tx @[DebugAccessPort.scala 67:14]
    uart.io.rx <= io.uartRx @[DebugAccessPort.scala 68:14]
    inst fifoUartToBf of Fifo @[DebugAccessPort.scala 73:28]
    fifoUartToBf.clock <= clock
    fifoUartToBf.reset <= reset
    fifoUartToBf.io.inData <= uart.io.rxData @[DebugAccessPort.scala 74:18]
    uart.io.rxReady <= fifoUartToBf.io.inReady @[DebugAccessPort.scala 75:19]
    fifoUartToBf.io.inValid <= uart.io.rxValid @[DebugAccessPort.scala 76:19]
    uart.io.rxAck <= fifoUartToBf.io.inAck @[DebugAccessPort.scala 77:17]
    bf.io.programData <= fifoUartToBf.io.outData @[DebugAccessPort.scala 79:21]
    bf.io.stdinData <= fifoUartToBf.io.outData @[DebugAccessPort.scala 80:19]
    node _T_34 = mux(program, fifoUartToBf.io.outValid, UInt<1>("h00")) @[DebugAccessPort.scala 81:28]
    bf.io.programValid <= _T_34 @[DebugAccessPort.scala 81:22]
    node _T_36 = eq(program, UInt<1>("h00")) @[DebugAccessPort.scala 82:27]
    node _T_38 = mux(_T_36, fifoUartToBf.io.outValid, UInt<1>("h00")) @[DebugAccessPort.scala 82:26]
    bf.io.stdinValid <= _T_38 @[DebugAccessPort.scala 82:20]
    node _T_39 = mux(program, bf.io.programReady, bf.io.stdinReady) @[DebugAccessPort.scala 83:34]
    fifoUartToBf.io.outReady <= _T_39 @[DebugAccessPort.scala 83:28]
    node _T_40 = mux(program, bf.io.programAck, bf.io.stdinAck) @[DebugAccessPort.scala 84:32]
    fifoUartToBf.io.outAck <= _T_40 @[DebugAccessPort.scala 84:26]
    inst fifoBfToUart of Fifo_1 @[DebugAccessPort.scala 87:28]
    fifoBfToUart.clock <= clock
    fifoBfToUart.reset <= reset
    uart.io.txData <= fifoBfToUart.io.outData @[DebugAccessPort.scala 88:18]
    fifoBfToUart.io.outReady <= uart.io.txReady @[DebugAccessPort.scala 89:19]
    uart.io.txValid <= fifoBfToUart.io.outValid @[DebugAccessPort.scala 90:19]
    fifoBfToUart.io.outAck <= uart.io.txAck @[DebugAccessPort.scala 91:17]
    fifoBfToUart.io.inData <= bf.io.stdoutData @[DebugAccessPort.scala 93:20]
    bf.io.stdoutReady <= fifoBfToUart.io.inReady @[DebugAccessPort.scala 94:21]
    fifoBfToUart.io.inValid <= bf.io.stdoutValid @[DebugAccessPort.scala 95:21]
    bf.io.stdoutAck <= fifoBfToUart.io.inAck @[DebugAccessPort.scala 96:19]
    
